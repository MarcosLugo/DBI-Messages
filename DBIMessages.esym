D G "__PCH__" 0 0 ""5.083""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""15-Nov-19""
D G "__TIME__" 0 0 ""15:52:57""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Standard Header file for the PIC18F26K80 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 46 ""
v L "value" 2 46 "int8" `55 
f B "set_tris_a" 2 46 "void(int8 value)" `54 
f N "set_tris_b" 2 47 ""
v L "value" 2 47 "int8" `57 
f B "set_tris_b" 2 47 "void(int8 value)" `56 
f N "set_tris_c" 2 48 ""
v L "value" 2 48 "int8" `59 
f B "set_tris_c" 2 48 "void(int8 value)" `58 
f N "set_tris_e" 2 49 ""
v L "value" 2 49 "int8" `61 
f B "set_tris_e" 2 49 "void(int8 value)" `60 
f N "get_tris_a" 2 50 ""
f B "get_tris_a" 2 50 "int8()" `62 
f N "get_tris_b" 2 51 ""
f B "get_tris_b" 2 51 "int8()" `63 
f N "get_tris_c" 2 52 ""
f B "get_tris_c" 2 52 "int8()" `64 
f N "get_tris_e" 2 53 ""
f B "get_tris_e" 2 53 "int8()" `65 
f N "output_a" 2 54 ""
v L "value" 2 54 "int8" `67 
f B "output_a" 2 54 "void(int8 value)" `66 
f N "output_b" 2 55 ""
v L "value" 2 55 "int8" `69 
f B "output_b" 2 55 "void(int8 value)" `68 
f N "output_c" 2 56 ""
v L "value" 2 56 "int8" `71 
f B "output_c" 2 56 "void(int8 value)" `70 
f N "output_e" 2 57 ""
v L "value" 2 57 "int8" `73 
f B "output_e" 2 57 "void(int8 value)" `72 
f N "input_a" 2 58 ""
f B "input_a" 2 58 "int8()" `74 
f N "input_b" 2 59 ""
f B "input_b" 2 59 "int8()" `75 
f N "input_c" 2 60 ""
f B "input_c" 2 60 "int8()" `76 
f N "input_e" 2 61 ""
f B "input_e" 2 61 "int8()" `77 
f N "input_change_a" 2 62 ""
f B "input_change_a" 2 62 "int8()" `78 
f N "input_change_b" 2 63 ""
f B "input_change_b" 2 63 "int8()" `79 
f N "input_change_c" 2 64 ""
f B "input_change_c" 2 64 "int8()" `80 
f N "input_change_e" 2 65 ""
f B "input_change_e" 2 65 "int8()" `81 
f N "port_a_pullups" 2 66 ""
v L "value" 2 66 "int8" `83 
f B "port_a_pullups" 2 66 "void(int8 value)" `82 
f N "port_b_pullups" 2 67 ""
v L "upmask" 2 67 "int8" `85 
f B "port_b_pullups" 2 67 "void(int8 upmask)" `84 
f N "port_c_pullups" 2 68 ""
v L "value" 2 68 "int8" `87 
f B "port_c_pullups" 2 68 "void(int8 value)" `86 
f N "port_d_pullups" 2 69 ""
v L "value" 2 69 "int8" `89 
f B "port_d_pullups" 2 69 "void(int8 value)" `88 
f N "port_e_pullups" 2 70 ""
v L "value" 2 70 "int8" `91 
f B "port_e_pullups" 2 70 "void(int8 value)" `90 
f N "port_f_pullups" 2 71 ""
v L "value" 2 71 "int8" `93 
f B "port_f_pullups" 2 71 "void(int8 value)" `92 
f N "port_g_pullups" 2 72 ""
v L "value" 2 72 "int8" `95 
f B "port_g_pullups" 2 72 "void(int8 value)" `94 
f N "set_slow_slew_a" 2 73 ""
v L "value" 2 73 "int8" `97 
f B "set_slow_slew_a" 2 73 "void(int8 value)" `96 
f N "set_slow_slew_b" 2 74 ""
v L "value" 2 74 "int8" `99 
f B "set_slow_slew_b" 2 74 "void(int8 value)" `98 
f N "set_slow_slew_c" 2 75 ""
v L "value" 2 75 "int8" `101 
f B "set_slow_slew_c" 2 75 "void(int8 value)" `100 
f N "set_slow_slew_e" 2 76 ""
v L "value" 2 76 "int8" `103 
f B "set_slow_slew_e" 2 76 "void(int8 value)" `102 
f N "input" 2 77 ""
v L "pin" 2 77 "int16" `105 
f B "input" 2 77 "int8(int16 pin)" `104 
f N "input_state" 2 78 ""
v L "pin" 2 78 "int16" `107 
f B "input_state" 2 78 "int8(int16 pin)" `106 
f N "output_low" 2 79 ""
v L "pin" 2 79 "int16" `109 
f B "output_low" 2 79 "void(int16 pin)" `108 
f N "output_high" 2 80 ""
v L "pin" 2 80 "int16" `111 
f B "output_high" 2 80 "void(int16 pin)" `110 
f N "output_toggle" 2 81 ""
v L "pin" 2 81 "int16" `113 
f B "output_toggle" 2 81 "void(int16 pin)" `112 
f N "output_bit" 2 82 ""
v L "pin" 2 82 "int16" `115 
v L "level" 2 82 "int8" `116 
f B "output_bit" 2 82 "void(int16 pin,int8 level)" `114 
f N "output_float" 2 83 ""
v L "pin" 2 83 "int16" `118 
f B "output_float" 2 83 "void(int16 pin)" `117 
f N "output_drive" 2 84 ""
v L "pin" 2 84 "int16" `120 
f B "output_drive" 2 84 "void(int16 pin)" `119  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 88 "31744"
d G "PIN_A1" 2 89 "31745"
d G "PIN_A2" 2 90 "31746"
d G "PIN_A3" 2 91 "31747"
d G "PIN_A5" 2 92 "31749"
d G "PIN_A6" 2 93 "31750"
d G "PIN_A7" 2 94 "31751"
d G "PIN_B0" 2 96 "31752"
d G "PIN_B1" 2 97 "31753"
d G "PIN_B2" 2 98 "31754"
d G "PIN_B3" 2 99 "31755"
d G "PIN_B4" 2 100 "31756"
d G "PIN_B5" 2 101 "31757"
d G "PIN_B6" 2 102 "31758"
d G "PIN_B7" 2 103 "31759"
d G "PIN_C0" 2 105 "31760"
d G "PIN_C1" 2 106 "31761"
d G "PIN_C2" 2 107 "31762"
d G "PIN_C3" 2 108 "31763"
d G "PIN_C4" 2 109 "31764"
d G "PIN_C5" 2 110 "31765"
d G "PIN_C6" 2 111 "31766"
d G "PIN_C7" 2 112 "31767"
d G "PIN_E3" 2 114 "31779"
d G "FALSE" 2 117 "0"
d G "TRUE" 2 118 "1"
d G "BYTE" 2 120 "int8"
d G "BOOLEAN" 2 121 "int1"
d G "getc" 2 123 "getch"
d G "fgetc" 2 124 "getch"
d G "getchar" 2 125 "getch"
d G "putc" 2 126 "putchar"
d G "fputc" 2 127 "putchar"
d G "fgets" 2 128 "gets"
d G "fputs" 2 129 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 134 ""
f B "restart_cause" 2 134 "int8()" `121 
f N "reset_cpu" 2 135 ""
f B "reset_cpu" 2 135 "void()" `122 
f N "sleep" 2 136 ""
f B "sleep" 2 136 "void()" `123 
f N "sleep" 2 137 ""
v L "type" 2 137 "int8" `125 
f B "sleep" 2 137 "void(int8 type)" `124  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 139 "7"
d G "MCLR_FROM_SLEEP" 2 140 "11"
d G "MCLR_FROM_RUN" 2 141 "15"
d G "NORMAL_POWER_UP" 2 142 "12"
d G "BROWNOUT_RESTART" 2 143 "14"
d G "WDT_FROM_SLEEP" 2 144 "3"
d G "RESET_INSTRUCTION" 2 145 "0"
d G "SLEEP_FULL" 2 148 "0" "Default"
d G "SLEEP_IDLE" 2 149 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 156 ""
v L "mode" 2 156 "int8" `127 
f B "setup_timer_0" 2 156 "void(int8 mode)" `126 
f N "set_timer0" 2 157 ""
v L "value" 2 157 "int16" `129 
f B "set_timer0" 2 157 "void(int16 value)" `128 
f N "get_timer0" 2 158 ""
f B "get_timer0" 2 158 "int16()" `130 
f N "setup_counters" 2 159 ""
v L "mode" 2 159 "int8" `132 
v L "prescaler" 2 159 "int8" `133 
f B "setup_counters" 2 159 "void(int8 mode,int8 prescaler)" `131 
f N "set_rtcc" 2 160 ""
v L "value" 2 160 "int16" `135 
f B "set_rtcc" 2 160 "void(int16 value)" `134 
f N "get_rtcc" 2 161 ""
f B "get_rtcc" 2 161 "int16()" `136  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 163 "0"
d G "T0_EXT_L_TO_H" 2 164 "32"
d G "T0_EXT_H_TO_L" 2 165 "48"
d G "T0_DIV_1" 2 167 "8"
d G "T0_DIV_2" 2 168 "0"
d G "T0_DIV_4" 2 169 "1"
d G "T0_DIV_8" 2 170 "2"
d G "T0_DIV_16" 2 171 "3"
d G "T0_DIV_32" 2 172 "4"
d G "T0_DIV_64" 2 173 "5"
d G "T0_DIV_128" 2 174 "6"
d G "T0_DIV_256" 2 175 "7"
d G "T0_OFF" 2 177 "0x80"
d G "T0_8_BIT" 2 179 "0x40"
d G "RTCC_INTERNAL" 2 183 "0"
d G "RTCC_EXT_L_TO_H" 2 184 "32"
d G "RTCC_EXT_H_TO_L" 2 185 "48"
d G "RTCC_DIV_1" 2 186 "8"
d G "RTCC_DIV_2" 2 187 "0"
d G "RTCC_DIV_4" 2 188 "1"
d G "RTCC_DIV_8" 2 189 "2"
d G "RTCC_DIV_16" 2 190 "3"
d G "RTCC_DIV_32" 2 191 "4"
d G "RTCC_DIV_64" 2 192 "5"
d G "RTCC_DIV_128" 2 193 "6"
d G "RTCC_DIV_256" 2 194 "7"
d G "RTCC_OFF" 2 195 "0x80"
d G "RTCC_8_BIT" 2 196 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 207 ""
v L "mode" 2 207 "int16" `138 
f B "setup_wdt" 2 207 "void(int16 mode)" `137 
f N "restart_wdt" 2 208 ""
f B "restart_wdt" 2 208 "void()" `139  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 210 "0x100"
d G "WDT_OFF" 2 211 "0"
d G "WDT_4MS" 2 213 "0x300"
d G "WDT_8MS" 2 214 "0x500"
d G "WDT_16MS" 2 215 "0x700"
d G "WDT_32MS" 2 216 "0x900"
d G "WDT_64MS" 2 217 "0xB00"
d G "WDT_128MS" 2 218 "0xD00"
d G "WDT_256MS" 2 219 "0xF00"
d G "WDT_512MS" 2 220 "0x1100"
d G "WDT_1S" 2 221 "0x1300"
d G "WDT_2S" 2 222 "0x1500"
d G "WDT_4S" 2 223 "0x1700"
d G "WDT_8S" 2 224 "0x1900"
d G "WDT_16S" 2 225 "0x1B00"
d G "WDT_32S" 2 226 "0x1D00"
d G "WDT_64S" 2 227 "0x1F00"
d G "WDT_128S" 2 228 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 233 ""
v L "mode" 2 233 "int16" `141 
f B "setup_timer_1" 2 233 "void(int16 mode)" `140 
f N "get_timer1" 2 234 ""
f B "get_timer1" 2 234 "int16()" `142 
f N "set_timer1" 2 235 ""
v L "value" 2 235 "int16" `144 
f B "set_timer1" 2 235 "void(int16 value)" `143  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 238 "0"
d G "T1_INTERNAL" 2 239 "0x07"
d G "T1_EXTERNAL" 2 240 "0x87"
d G "T1_EXTERNAL_SYNC" 2 241 "0x83"
d G "T1_FOSC" 2 242 "0x47"
d G "T1_ENABLE_SOSC" 2 244 "0x08"
d G "T1_DIV_BY_1" 2 246 "0"
d G "T1_DIV_BY_2" 2 247 "0x10"
d G "T1_DIV_BY_4" 2 248 "0x20"
d G "T1_DIV_BY_8" 2 249 "0x30"
d G "T1_GATE" 2 251 "0x8000"
d G "T1_GATE_INVERTED" 2 252 "0xC000"
d G "T1_GATE_TOGGLE" 2 253 "0xA000"
d G "T1_GATE_SINGLE" 2 254 "0x9000"
d G "T1_GATE_TIMER2" 2 255 "0x8100"
d G "T1_GATE_COMP1" 2 256 "0x8200"
d G "T1_GATE_COMP2" 2 257 "0x8300"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 262 ""
v L "mode" 2 262 "int8" `146 
v L "period" 2 262 "int8" `147 
v L "postscale" 2 262 "int8" `148 
f B "setup_timer_2" 2 262 "void(int8 mode,int8 period,int8 postscale)" `145 
f N "get_timer2" 2 263 ""
f B "get_timer2" 2 263 "int8()" `149 
f N "set_timer2" 2 264 ""
v L "value" 2 264 "int8" `151 
f B "set_timer2" 2 264 "void(int8 value)" `150  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 266 "0"
d G "T2_DIV_BY_1" 2 267 "4"
d G "T2_DIV_BY_4" 2 268 "5"
d G "T2_DIV_BY_16" 2 269 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 274 ""
v L "mode" 2 274 "int16" `153 
f B "setup_timer_3" 2 274 "void(int16 mode)" `152 
f N "get_timer3" 2 275 ""
f B "get_timer3" 2 275 "int16()" `154 
f N "set_timer3" 2 276 ""
v L "value" 2 276 "int16" `156 
f B "set_timer3" 2 276 "void(int16 value)" `155  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 279 "0"
d G "T3_INTERNAL" 2 280 "0x07"
d G "T3_EXTERNAL" 2 281 "0x87"
d G "T3_EXTERNAL_SYNC" 2 282 "0x83"
d G "T3_FOSC" 2 283 "0x47"
d G "T3_ENABLE_SOSC" 2 285 "0x08"
d G "T3_DIV_BY_1" 2 287 "0"
d G "T3_DIV_BY_2" 2 288 "0x10"
d G "T3_DIV_BY_4" 2 289 "0x20"
d G "T3_DIV_BY_8" 2 290 "0x30"
d G "T3_GATE" 2 292 "0x8000"
d G "T3_GATE_INVERTED" 2 293 "0xC000"
d G "T3_GATE_TOGGLE" 2 294 "0xA000"
d G "T3_GATE_SINGLE" 2 295 "0x9000"
d G "T3_GATE_TIMER4" 2 296 "0x8100"
d G "T3_GATE_COMP1" 2 297 "0x8200"
d G "T3_GATE_COMP2" 2 298 "0x8300"
c L "set_timer3" 2 3 3 "FUNCTION"
f N "setup_timer_4" 2 303 ""
v L "mode" 2 303 "int16" `158 
v L "period" 2 303 "int8" `159 
v L "postscaler" 2 303 "int8" `160 
f B "setup_timer_4" 2 303 "void(int16 mode,int8 period,int8 postscaler)" `157 
f N "get_timer4" 2 304 ""
f B "get_timer4" 2 304 "int8()" `161 
f N "set_timer4" 2 305 ""
v L "value" 2 305 "int8" `163 
f B "set_timer4" 2 305 "void(int8 value)" `162  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 307 "0"
d G "T4_DIV_BY_1" 2 308 "4"
d G "T4_DIV_BY_4" 2 309 "5"
d G "T4_DIV_BY_16" 2 310 "6"
c L "set_timer4" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 316 ""
v L "mode" 2 316 "int32" `165 
f B "setup_ccp1" 2 316 "void(int32 mode)" `164 
f N "setup_ccp1" 2 317 ""
v L "mode" 2 317 "int32" `167 
v L "pwm" 2 317 "int8" `168 
f B "setup_ccp1" 2 317 "void(int32 mode,int8 pwm)" `166 
f N "set_pwm1_duty" 2 318 ""
v L "value" 2 318 "int16" `170 
f B "set_pwm1_duty" 2 318 "void(int16 value)" `169  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 320 "0"
d G "CCP_CAPTURE_FE" 2 321 "0x04"
d G "CCP_CAPTURE_RE" 2 322 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 323 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 324 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 325 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 326 "0x09"
d G "CCP_COMPARE_INT" 2 327 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 328 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 329 "0x0B"
d G "CCP_PWM" 2 330 "0x0C"
d G "CCP_PWM_PLUS_1" 2 331 "0x1c"
d G "CCP_PWM_PLUS_2" 2 332 "0x2c"
d G "CCP_PWM_PLUS_3" 2 333 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "CCP_USE_TIMER1_AND_TIMER2" 2 343 "0x0000"
d G "CCP_USE_TIMER3_AND_TIMER4" 2 344 "0x0100"
d G "CCP_PWM_H_H" 2 347 "0x0c"
d G "CCP_PWM_H_L" 2 348 "0x0d"
d G "CCP_PWM_L_H" 2 349 "0x0e"
d G "CCP_PWM_L_L" 2 350 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 352 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 353 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 354 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 356 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 357 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 358 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 359 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 360 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 361 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 362 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 364 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 365 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 366 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 368 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 369 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 370 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 372 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 374 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 375 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 376 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 377 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 378 "0x10000000"
d G "CCP_COMPLEMENTARY_AB" 2 379 "0x43000000"
d G "CCP_COMPLEMENTARY_AC" 2 380 "0x85000000"
d G "CCP_COMPLEMENTARY_AD" 2 381 "0xC9000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 384 ""
v L "mode" 2 384 "int32" `175 
f B "setup_ccp2" 2 384 "void(int32 mode)" `174 
f N "setup_ccp2" 2 385 ""
v L "mode" 2 385 "int32" `177 
v L "pwm" 2 385 "int8" `178 
f B "setup_ccp2" 2 385 "void(int32 mode,int8 pwm)" `176 
f N "set_pwm2_duty" 2 386 ""
v L "value" 2 386 "int16" `180 
f B "set_pwm2_duty" 2 386 "void(int16 value)" `179 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
f N "setup_ccp3" 2 392 ""
v L "mode" 2 392 "int32" `185 
f B "setup_ccp3" 2 392 "void(int32 mode)" `184 
f N "setup_ccp3" 2 393 ""
v L "mode" 2 393 "int32" `187 
v L "pwm" 2 393 "int8" `188 
f B "setup_ccp3" 2 393 "void(int32 mode,int8 pwm)" `186 
f N "set_pwm3_duty" 2 394 ""
v L "value" 2 394 "int16" `190 
f B "set_pwm3_duty" 2 394 "void(int16 value)" `189 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
f N "setup_ccp4" 2 400 ""
v L "mode" 2 400 "int32" `195 
f B "setup_ccp4" 2 400 "void(int32 mode)" `194 
f N "setup_ccp4" 2 401 ""
v L "mode" 2 401 "int32" `197 
v L "pwm" 2 401 "int8" `198 
f B "setup_ccp4" 2 401 "void(int32 mode,int8 pwm)" `196 
f N "set_pwm4_duty" 2 402 ""
v L "value" 2 402 "int16" `200 
f B "set_pwm4_duty" 2 402 "void(int16 value)" `199 
c L "set_pwm4_duty" 2 3 1 "FUNCTION"
f N "setup_ccp5" 2 408 ""
v L "mode" 2 408 "int32" `205 
f B "setup_ccp5" 2 408 "void(int32 mode)" `204 
f N "setup_ccp5" 2 409 ""
v L "mode" 2 409 "int32" `207 
v L "pwm" 2 409 "int8" `208 
f B "setup_ccp5" 2 409 "void(int32 mode,int8 pwm)" `206 
f N "set_pwm5_duty" 2 410 ""
v L "value" 2 410 "int16" `210 
f B "set_pwm5_duty" 2 410 "void(int16 value)" `209 
c L "set_pwm5_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 418 ""
v L "mode" 2 418 "int32" `215 
f B "setup_spi" 2 418 "void(int32 mode)" `214 
f N "spi_write" 2 419 ""
v L "value" 2 419 "int8" `217 
f B "spi_write" 2 419 "void(int8 value)" `216 
f N "spi_read" 2 420 ""
f B "spi_read" 2 420 "int8()" `218 
f N "spi_read" 2 421 ""
v L "value" 2 421 "int8" `220 
f B "spi_read" 2 421 "int8(int8 value)" `219 
f N "spi_data_is_in" 2 422 ""
f B "spi_data_is_in" 2 422 "int8()" `221  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 424 "0x00"
d G "SPI_MASTER" 2 425 "0x20"
d G "SPI_SLAVE" 2 426 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 427 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 428 "0x00"
d G "SPI_CLK_DIV_4" 2 429 "0x00"
d G "SPI_CLK_DIV_16" 2 430 "0x01"
d G "SPI_CLK_DIV_64" 2 431 "0x02"
d G "SPI_CLK_T2" 2 432 "0x03"
d G "SPI_SS_DISABLED" 2 433 "0x01"
d G "SPI_XMIT_L_TO_H" 2 435 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 436 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 438 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 439 "0x8000"
d G "SPI_L_TO_H" 2 442 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 443 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 447 ""
v L "baud" 2 447 "int32" `223 
f B "setup_uart" 2 447 "void(int32 baud)" `222 
f N "setup_uart" 2 448 ""
v L "baud" 2 448 "int32" `225 
v L "stream" 2 448 "int8" `226 
f B "setup_uart" 2 448 "void(int32 baud,int8 stream)" `224 
f N "setup_uart" 2 449 ""
v L "baud" 2 449 "int32" `228 
v L "stream" 2 449 "int8" `229 
v L "clock" 2 449 "int32" `230 
f B "setup_uart" 2 449 "void(int32 baud,int8 stream,int32 clock)" `227 
f N "set_uart_speed" 2 450 ""
v L "baud" 2 450 "int32" `232 
f B "set_uart_speed" 2 450 "void(int32 baud)" `231 
f N "set_uart_speed" 2 451 ""
v L "baud" 2 451 "int32" `234 
v L "stream" 2 451 "int8" `235 
f B "set_uart_speed" 2 451 "void(int32 baud,int8 stream)" `233 
f N "set_uart_speed" 2 452 ""
v L "baud" 2 452 "int32" `237 
v L "stream" 2 452 "int8" `238 
v L "clock" 2 452 "int32" `239 
f B "set_uart_speed" 2 452 "void(int32 baud,int8 stream,int32 clock)" `236  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 456 "2"
d G "UART_DATA" 2 457 "4"
d G "UART_AUTODETECT" 2 458 "8"
d G "UART_AUTODETECT_NOWAIT" 2 459 "9"
d G "UART_WAKEUP_ON_RDA" 2 460 "10"
d G "UART_SEND_BREAK" 2 461 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 466 ""
v L "mode" 2 466 "int32" `241 
f B "setup_comparator" 2 466 "void(int32 mode)" `240  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 469 "0x0404"
d G "NC_NC" 2 470 "0x0404"
d G "CP1_B1_B0" 2 473 "0x0080"
d G "CP1_A5_B0" 2 474 "0x0082"
d G "CP1_VBG_B0" 2 475 "0x0083"
d G "CP1_B1_VREF" 2 476 "0x0084"
d G "CP1_A5_VREF" 2 477 "0x0086"
d G "CP1_VBG_VREF" 2 478 "0x0087"
d G "CP1_OUT_ON_B2" 2 480 "0x0040"
d G "CP1_INVERT" 2 481 "0x0020"
d G "CP1_INT_L2H" 2 482 "0x0008"
d G "CP1_INT_H2L" 2 483 "0x0010"
d G "CP2_A5_B4" 2 486 "0x8000"
d G "CP2_B1_B4" 2 487 "0x8200"
d G "CP2_VBG_B4" 2 488 "0x8300"
d G "CP2_A5_VREF" 2 489 "0x8400"
d G "CP2_B1_VREF" 2 490 "0x8600"
d G "CP2_VBG_VREF" 2 491 "0x8700"
d G "CP2_OUT_ON_B3" 2 493 "0x4000"
d G "CP2_INVERT" 2 494 "0x2000"
d G "CP2_INT_L2H" 2 495 "0x0800"
d G "CP2_INT_H2L" 2 496 "0x1000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 503 ""
v L "mode" 2 503 "int8" `245 
f B "setup_vref" 2 503 "void(int8 mode)" `244  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 505 "0"
d G "VREF_ON" 2 506 "0x80"
d G "VREF_EXT" 2 507 "0x20" "Range for ref gen VREF- to VREF+"
d G "VREF_OUT_A0" 2 508 "0x40"
c L "setup_vref" 2 3 3 "FUNCTION"
f N "setup_low_volt_detect" 2 513 ""
v L "mode" 2 513 "int8" `247 
f B "setup_low_volt_detect" 2 513 "void(int8 mode)" `246  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 515 "0x1F"
d G "LVD_45" 2 516 "0x1E"
d G "LVD_42" 2 517 "0x1D"
d G "LVD_40" 2 518 "0x1C"
d G "LVD_38" 2 519 "0x1B"
d G "LVD_36" 2 520 "0x1A"
d G "LVD_35" 2 521 "0x19"
d G "LVD_33" 2 522 "0x18"
d G "LVD_30" 2 523 "0x17"
d G "LVD_28" 2 524 "0x16"
d G "LVD_27" 2 525 "0x15"
d G "LVD_25" 2 526 "0x14"
d G "LVD_24" 2 527 "0x13"
d G "LVD_23" 2 528 "0x12"
d G "LVD_22" 2 529 "0x11"
d G "LVD_21" 2 530 "0x10"
d G "LVD_TRIGGER_BELOW" 2 532 "0"
d G "LVD_TRIGGER_ABOVE" 2 533 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 538 ""
v L "mode" 2 538 "int16" `249 
f B "setup_oscillator" 2 538 "int8(int16 mode)" `248 
f N "setup_oscillator" 2 539 ""
v L "mode" 2 539 "int16" `251 
v L "tune" 2 539 "sint8" `252 
f B "setup_oscillator" 2 539 "int8(int16 mode,sint8 tune)" `250  "Constants used in setup_oscillator() are:"
d G "OSC_31250" 2 541 "0x8000"
d G "OSC_PLL_ON" 2 542 "0x4000"
d G "OSC_PLL_OFF" 2 543 "0"
d G "OSC_31KHZ" 2 544 "0"
d G "OSC_250KHZ" 2 545 "0x10"
d G "OSC_500KHZ" 2 546 "0x20"
d G "OSC_1MHZ" 2 547 "0x30"
d G "OSC_2MHZ" 2 548 "0x40"
d G "OSC_4MHZ" 2 549 "0x50"
d G "OSC_8MHZ" 2 550 "0x60"
d G "OSC_16MHZ" 2 551 "0x70"
d G "OSC_SOSC" 2 553 "1"
d G "OSC_INTRC" 2 554 "2"
d G "OSC_NORMAL" 2 555 "0"
d G "OSC_IDLE_MODE" 2 557 "0x80"
d G "OSC_MFINTRC_ON" 2 559 "0x10000" "MF-INTOSC used instead of HF-INTOSC for 500KHZ, 250KHZ and 31KHZ operating frequencies."
d G "OSC_SOSC_ON" 2 560 "0x80000"
d G "OSC_STATE_STABLE" 2 564 "4"
d G "OSC_STATE_PRIMARY_RUNNING" 2 565 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 572 ""
v L "mode" 2 572 "int16" `254 
f B "setup_adc" 2 572 "void(int16 mode)" `253 
f N "read_adc" 2 573 ""
f B "read_adc" 2 573 "int8()" `255 
f N "read_adc" 2 574 ""
v L "mode" 2 574 "int8" `257 
f B "read_adc" 2 574 "int8(int8 mode)" `256 
f N "read_adc" 2 575 ""
f G "read_adc" 2 575 "int16()" `258 
f N "read_adc" 2 576 ""
v L "mode" 2 576 "int8" `259 
f G "read_adc" 2 576 "int16(int8 mode)" `258 
f N "adc_done" 2 577 ""
f B "adc_done" 2 577 "int8(int8 mode)" `258  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 579 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 580 "0x100"
d G "ADC_CLOCK_DIV_4" 2 581 "0x04"
d G "ADC_CLOCK_DIV_8" 2 582 "0x01"
d G "ADC_CLOCK_DIV_16" 2 583 "0x05"
d G "ADC_CLOCK_DIV_32" 2 584 "0x02"
d G "ADC_CLOCK_DIV_64" 2 585 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 586 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 588 "0x00"
d G "ADC_TAD_MUL_2" 2 589 "0x08"
d G "ADC_TAD_MUL_4" 2 590 "0x10"
d G "ADC_TAD_MUL_6" 2 591 "0x18"
d G "ADC_TAD_MUL_8" 2 592 "0x20"
d G "ADC_TAD_MUL_12" 2 593 "0x28"
d G "ADC_TAD_MUL_16" 2 594 "0x30"
d G "ADC_TAD_MUL_20" 2 595 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 598 ""
v L "pins" 2 598 "int32" `260 
f B "setup_adc_ports" 2 598 "void(int32 pins)" `259 
f N "setup_adc_ports" 2 599 ""
v L "pins" 2 599 "int32" `262 
v L "reference" 2 599 "int32" `263 
f B "setup_adc_ports" 2 599 "void(int32 pins,int32 reference)" `261 
f N "set_analog_pins" 2 600 ""
v L "pins" 2 600 "int32" `265 
f B "set_analog_pins" 2 600 "void(int32 pins)" `264 
f N "set_analog_pins" 2 601 ""
v L "pins" 2 601 "int32" `267 
v L "reference" 2 601 "int32" `268 
f B "set_analog_pins" 2 601 "void(int32 pins,int32 reference)" `266 
f N "set_adc_channel" 2 602 ""
v L "channel" 2 602 "int8" `270 
f B "set_adc_channel" 2 602 "void(int8 channel)" `269  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 2 606 "0x000100" "| A0"
d G "sAN1" 2 607 "0x000200" "| A1"
d G "sAN2" 2 608 "0x000400" "| A2"
d G "sAN3" 2 609 "0x000800" "| A3"
d G "sAN4" 2 610 "0x001000" "| A5"
d G "sAN8" 2 611 "0x010000" "| B1"
d G "sAN9" 2 612 "0x020000" "| B4"
d G "sAN10" 2 613 "0x040000" "| B0"
d G "NO_ANALOGS" 2 614 "0" "None"
d G "ALL_ANALOG" 2 615 "0x071F00" "A0 A1 A2 A3 A5 B1 B4 B0"
d G "VSS_VDD" 2 618 "0x00" "| Range 0-Vdd"
d G "VSS_VREF" 2 619 "0x10" "| Range 0-VrefH"
d G "VSS_2V048" 2 620 "0x20" "| Range 0-2.048V"
d G "VSS_4V096" 2 621 "0x30" "| Range 0-3.096V"
d G "VREF_VDD" 2 622 "0x08" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 623 "0x18" "| Range VrefL-VrefH"
d G "VREF_2V048" 2 624 "0x28" "| Range VrefL-2.048V"
d G "VREF_4V096" 2 625 "0x38" "| Range VrefL-4.096V"
d G "ADC_START_AND_READ" 2 628 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 629 "1"
d G "ADC_READ_ONLY" 2 630 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 636 ""
v L "x" 2 636 "sint8" `272 
f B "abs" 2 636 "sint8(sint8 x)" `271 
f N "abs" 2 637 ""
v L "x" 2 637 "sint16" `274 
f B "abs" 2 637 "sint16(sint16 x)" `273 
f N "abs" 2 638 ""
v L "x" 2 638 "sint32" `276 
f B "abs" 2 638 "sint32(sint32 x)" `275 
f N "abs" 2 639 ""
v L "x" 2 639 "float" `278 
f B "abs" 2 639 "float(float x)" `277 
f N "_mul" 2 640 ""
v L "??65535" 2 640 "int8" `280 
v L "??65535" 2 640 "int8" `281 
f B "_mul" 2 640 "int16(int8 ,int8 )" `279 
f N "_mul" 2 641 ""
v L "??65535" 2 641 "sint8" `283 
v L "??65535" 2 641 "sint8" `284 
f B "_mul" 2 641 "sint16(sint8 ,sint8 )" `282 
f N "_mul" 2 642 ""
v L "??65535" 2 642 "int16" `286 
v L "??65535" 2 642 "int16" `287 
f B "_mul" 2 642 "int32(int16 ,int16 )" `285 
f N "_mul" 2 643 ""
v L "??65535" 2 643 "sint16" `289 
v L "??65535" 2 643 "sint16" `290 
f B "_mul" 2 643 "sint32(sint16 ,sint16 )" `288  "Memory Manipulation Prototypes:"
f N "read_bank" 2 646 ""
v L "bank" 2 646 "int8" `292 
v L "offset" 2 646 "int8" `293 
f B "read_bank" 2 646 "int8(int8 bank,int8 offset)" `291 
f N "write_bank" 2 647 ""
v L "bank" 2 647 "int8" `295 
v L "offset" 2 647 "int8" `296 
v L "value" 2 647 "int8" `297 
f B "write_bank" 2 647 "void(int8 bank,int8 offset,int8 value)" `294 
f N "strcpy" 2 648 ""
v L "dest" 2 648 "*int8" `299 
v L "src" 2 648 "*int8" `300 
f B "strcpy" 2 648 "void(*int8 dest,*int8 src)" `298 
f N "memset" 2 649 ""
v L "destination" 2 649 "*int8" `302 
v L "value" 2 649 "int8" `303 
v L "num" 2 649 "int16" `304 
f B "memset" 2 649 "void(*int8 destination,int8 value,int16 num)" `301 
f N "memcpy" 2 650 ""
v L "destination" 2 650 "*int8" `306 
v L "source" 2 650 "*int8" `307 
v L "num" 2 650 "int16" `308 
f B "memcpy" 2 650 "void(*int8 destination,*int8 source,int16 num)" `305  "String Prototypes:"
f N "toupper" 2 653 ""
v L "cvalue" 2 653 "int8" `310 
f B "toupper" 2 653 "int8(int8 cvalue)" `309 
f N "tolower" 2 654 ""
v L "cvalue" 2 654 "int8" `312 
f B "tolower" 2 654 "int8(int8 cvalue)" `311 
f N "sprintf" 2 655 ""
v L "string" 2 655 "*int8" `314 
v L "cstring" 2 655 "*int8" `315 
f B "sprintf" 2 655 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `313  "Data Manipulators Prototypes:"
f N "shift_left" 2 658 ""
v L "address" 2 658 "*int8" `318 
v L "bytes" 2 658 "int8" `319 
v L "value" 2 658 "int8" `320 
f B "shift_left" 2 658 "int8(*int8 address,int8 bytes,int8 value)" `317 
f N "shift_right" 2 659 ""
v L "address" 2 659 "*int8" `322 
v L "bytes" 2 659 "int8" `323 
v L "value" 2 659 "int8" `324 
f B "shift_right" 2 659 "int8(*int8 address,int8 bytes,int8 value)" `321 
f N "rotate_left" 2 660 ""
v L "address" 2 660 "*int8" `326 
v L "bytes" 2 660 "int8" `327 
f B "rotate_left" 2 660 "void(*int8 address,int8 bytes)" `325 
f N "rotate_right" 2 661 ""
v L "address" 2 661 "*int8" `329 
v L "bytes" 2 661 "int8" `330 
f B "rotate_right" 2 661 "void(*int8 address,int8 bytes)" `328 
f N "swap" 2 662 ""
v L "value" 2 662 "int8" `332 
f B "swap" 2 662 "void(int8 value)" `331 
f N "make8" 2 663 ""
v L "var" 2 663 "int16" `334 
v L "offset" 2 663 "int8" `335 
f B "make8" 2 663 "int8(int16 var,int8 offset)" `333 
f N "make8" 2 664 ""
v L "var" 2 664 "int32" `337 
v L "offset" 2 664 "int8" `338 
f B "make8" 2 664 "int8(int32 var,int8 offset)" `336 
f N "make16" 2 665 ""
v L "varhigh" 2 665 "int8" `340 
v L "varlow" 2 665 "int8" `341 
f B "make16" 2 665 "int16(int8 varhigh,int8 varlow)" `339 
f N "make32" 2 666 ""
v L "var1" 2 666 "int16" `343 
f B "make32" 2 666 "int32(int16 var1)" `342 
f N "make32" 2 667 ""
v L "var1" 2 667 "int16" `345 
v L "var2" 2 667 "int16" `346 
f B "make32" 2 667 "int32(int16 var1,int16 var2)" `344 
f N "make32" 2 668 ""
v L "var1" 2 668 "int16" `348 
v L "var2" 2 668 "int8" `349 
f B "make32" 2 668 "int32(int16 var1,int8 var2)" `347 
f N "make32" 2 669 ""
v L "var1" 2 669 "int16" `351 
v L "var2" 2 669 "int8" `352 
v L "var3" 2 669 "int8" `353 
f B "make32" 2 669 "int32(int16 var1,int8 var2,int8 var3)" `350 
f N "make32" 2 670 ""
v L "var1" 2 670 "int8" `355 
f B "make32" 2 670 "int32(int8 var1)" `354 
f N "make32" 2 671 ""
v L "var1" 2 671 "int8" `357 
v L "var2" 2 671 "int8" `358 
f B "make32" 2 671 "int32(int8 var1,int8 var2)" `356 
f N "make32" 2 672 ""
v L "var1" 2 672 "int8" `360 
v L "var2" 2 672 "int8" `361 
v L "var3" 2 672 "int8" `362 
f B "make32" 2 672 "int32(int8 var1,int8 var2,int8 var3)" `359 
f N "make32" 2 673 ""
v L "var1" 2 673 "int8" `364 
v L "var2" 2 673 "int8" `365 
v L "var3" 2 673 "int8" `366 
v L "var4" 2 673 "int8" `367 
f B "make32" 2 673 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `363 
f N "make32" 2 674 ""
v L "var1" 2 674 "int8" `369 
v L "var2" 2 674 "int16" `370 
f B "make32" 2 674 "int32(int8 var1,int16 var2)" `368 
f N "make32" 2 675 ""
v L "var1" 2 675 "int8" `372 
v L "var2" 2 675 "int16" `373 
v L "var3" 2 675 "int8" `374 
f B "make32" 2 675 "int32(int8 var1,int16 var2,int8 var3)" `371 
f N "make32" 2 676 ""
v L "var1" 2 676 "int8" `376 
v L "var2" 2 676 "int8" `377 
v L "var3" 2 676 "int16" `378 
f B "make32" 2 676 "int32(int8 var1,int8 var2,int16 var3)" `375 
f N "bit_set" 2 677 ""
v L "var" 2 677 "int8" `380 
v L "bit" 2 677 "int8" `381 
f B "bit_set" 2 677 "void(int8 var,int8 bit)" `379 
f N "bit_set" 2 678 ""
v L "var" 2 678 "int16" `383 
v L "bit" 2 678 "int8" `384 
f B "bit_set" 2 678 "void(int16 var,int8 bit)" `382 
f N "bit_set" 2 679 ""
v L "var" 2 679 "int32" `386 
v L "bit" 2 679 "int8" `387 
f B "bit_set" 2 679 "void(int32 var,int8 bit)" `385 
f N "bit_clear" 2 680 ""
v L "var" 2 680 "int8" `389 
v L "bit" 2 680 "int8" `390 
f B "bit_clear" 2 680 "void(int8 var,int8 bit)" `388 
f N "bit_clear" 2 681 ""
v L "var" 2 681 "int16" `392 
v L "bit" 2 681 "int8" `393 
f B "bit_clear" 2 681 "void(int16 var,int8 bit)" `391 
f N "bit_clear" 2 682 ""
v L "var" 2 682 "int32" `395 
v L "bit" 2 682 "int8" `396 
f B "bit_clear" 2 682 "void(int32 var,int8 bit)" `394 
f N "bit_test" 2 683 ""
v L "var" 2 683 "int8" `398 
v L "bit" 2 683 "int8" `399 
f B "bit_test" 2 683 "int8(int8 var,int8 bit)" `397 
f N "bit_test" 2 684 ""
v L "var" 2 684 "int16" `401 
v L "bit" 2 684 "int8" `402 
f B "bit_test" 2 684 "int8(int16 var,int8 bit)" `400 
f N "bit_test" 2 685 ""
v L "var" 2 685 "int32" `404 
v L "bit" 2 685 "int8" `405 
f B "bit_test" 2 685 "int8(int32 var,int8 bit)" `403  "#use delay() Prototypes:"
f N "delay_cycles" 2 688 ""
v L "count" 2 688 "int8" `407 
f B "delay_cycles" 2 688 "void(int8 count)" `406 
f N "delay_ms" 2 689 ""
v L "time" 2 689 "int16" `409 
f B "delay_ms" 2 689 "void(int16 time)" `408 
f N "delay_us" 2 690 ""
v L "time" 2 690 "int16" `411 
f B "delay_us" 2 690 "void(int16 time)" `410  "#use rs232() Prototypes:"
f N "putchar" 2 693 ""
v L "cdata" 2 693 "int8" `413 
f B "putchar" 2 693 "void(int8 cdata)" `412 
f N "putchar" 2 694 ""
v L "cdata" 2 694 "int8" `415 
v L "stream" 2 694 "int8" `416 
f B "putchar" 2 694 "void(int8 cdata,int8 stream)" `414 
f N "puts" 2 695 ""
v L "string" 2 695 "*int8" `418 
f B "puts" 2 695 "void(*int8 string)" `417 
f N "puts" 2 696 ""
v L "string" 2 696 "*int8" `420 
v L "stream" 2 696 "int8" `421 
f B "puts" 2 696 "void(*int8 string,int8 stream)" `419 
f N "getch" 2 697 ""
f B "getch" 2 697 "int8()" `422 
f N "getch" 2 698 ""
v L "stream" 2 698 "int8" `424 
f B "getch" 2 698 "int8(int8 stream)" `423 
f N "gets" 2 699 ""
v L "string" 2 699 "*int8" `426 
f B "gets" 2 699 "void(*int8 string)" `425 
f N "gets" 2 700 ""
v L "string" 2 700 "*int8" `428 
v L "stream" 2 700 "int8" `429 
f B "gets" 2 700 "void(*int8 string,int8 stream)" `427 
f N "kbhit" 2 701 ""
f B "kbhit" 2 701 "int8()" `430 
f N "kbhit" 2 702 ""
v L "stream" 2 702 "int8" `432 
f B "kbhit" 2 702 "int8(int8 stream)" `431 
f N "printf" 2 703 ""
v L "string" 2 703 "*int8" `434 
f B "printf" 2 703 "void(*int8 string,*int8 _VA_LIST)" `433 
f N "fprintf" 2 704 ""
v L "stream" 2 704 "int8" `437 
v L "string" 2 704 "*int8" `438 
f B "fprintf" 2 704 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `436 
f N "putc_send" 2 705 ""
f B "putc_send" 2 705 "void()" `440 
f N "fputc_send" 2 706 ""
v L "stream" 2 706 "int8" `442 
f B "fputc_send" 2 706 "void(int8 stream)" `441 
f N "rcv_buffer_full" 2 707 ""
f B "rcv_buffer_full" 2 707 "int8()" `443 
f N "rcv_buffer_full" 2 708 ""
v L "stream" 2 708 "int8" `445 
f B "rcv_buffer_full" 2 708 "int8(int8 stream)" `444 
f N "rcv_buffer_bytes" 2 709 ""
f B "rcv_buffer_bytes" 2 709 "int16()" `446 
f N "rcv_buffer_bytes" 2 710 ""
v L "stream" 2 710 "int8" `448 
f B "rcv_buffer_bytes" 2 710 "int16(int8 stream)" `447 
f N "tx_buffer_full" 2 711 ""
f B "tx_buffer_full" 2 711 "int8()" `449 
f N "tx_buffer_full" 2 712 ""
v L "stream" 2 712 "int8" `451 
f B "tx_buffer_full" 2 712 "int8(int8 stream)" `450 
f N "tx_buffer_bytes" 2 713 ""
f B "tx_buffer_bytes" 2 713 "int16()" `452 
f N "tx_buffer_bytes" 2 714 ""
v L "stream" 2 714 "int8" `454 
f B "tx_buffer_bytes" 2 714 "int16(int8 stream)" `453  "#use i2c() Prototypes:"
f N "i2c_read" 2 717 ""
f B "i2c_read" 2 717 "int8()" `455 
f N "i2c_read" 2 718 ""
v L "ack" 2 718 "int8" `457 
f B "i2c_read" 2 718 "int8(int8 ack)" `456 
f N "i2c_read" 2 719 ""
v L "stream" 2 719 "int8" `459 
v L "ack" 2 719 "int8" `460 
f B "i2c_read" 2 719 "int8(int8 stream,int8 ack)" `458 
f N "i2c_write" 2 720 ""
v L "data" 2 720 "int8" `462 
f B "i2c_write" 2 720 "int8(int8 data)" `461 
f N "i2c_write" 2 721 ""
v L "stream" 2 721 "int8" `464 
v L "data" 2 721 "int8" `465 
f B "i2c_write" 2 721 "int8(int8 stream,int8 data)" `463 
f N "i2c_start" 2 722 ""
f B "i2c_start" 2 722 "void()" `466 
f N "i2c_start" 2 723 ""
v L "stream" 2 723 "int8" `468 
f B "i2c_start" 2 723 "void(int8 stream)" `467 
f N "i2c_start" 2 724 ""
v L "stream" 2 724 "int8" `470 
v L "restart" 2 724 "int8" `471 
f B "i2c_start" 2 724 "void(int8 stream,int8 restart)" `469 
f N "i2c_stop" 2 725 ""
f B "i2c_stop" 2 725 "void()" `472 
f N "i2c_stop" 2 726 ""
v L "stream" 2 726 "int8" `474 
f B "i2c_stop" 2 726 "void(int8 stream)" `473 
f N "i2c_isr_state" 2 727 ""
f B "i2c_isr_state" 2 727 "int8()" `475 
f N "i2c_slaveaddr" 2 728 ""
v L "addr" 2 728 "int8" `477 
f B "i2c_slaveaddr" 2 728 "void(int8 addr)" `476 
f N "i2c_slaveaddr" 2 729 ""
v L "stream" 2 729 "int8" `479 
v L "addr" 2 729 "int8" `480 
f B "i2c_slaveaddr" 2 729 "void(int8 stream,int8 addr)" `478 
f N "i2c_poll" 2 730 ""
f B "i2c_poll" 2 730 "int8()" `481 
f N "i2c_poll" 2 731 ""
v L "stream" 2 731 "int8" `483 
f B "i2c_poll" 2 731 "int8(int8 stream)" `482 
f N "i2c_init" 2 732 ""
v L "baud" 2 732 "int32" `485 
f B "i2c_init" 2 732 "void(int32 baud)" `484 
f N "i2c_init" 2 733 ""
v L "stream" 2 733 "int8" `487 
v L "baud" 2 733 "int32" `488 
f B "i2c_init" 2 733 "void(int8 stream,int32 baud)" `486 
f N "i2c_transfer" 2 734 ""
v L "address" 2 734 "int8" `490 
v L "wData" 2 734 "*int8" `491 
v L "wCount" 2 734 "int8" `492 
f B "i2c_transfer" 2 734 "int8(int8 address,*int8 wData,int8 wCount)" `489 
f N "i2c_transfer" 2 735 ""
v L "address" 2 735 "int8" `494 
v L "wData" 2 735 "*int8" `495 
v L "wCount" 2 735 "int8" `496 
v L "rData" 2 735 "*int8" `497 
v L "rCount" 2 735 "*int8" `498 
f B "i2c_transfer" 2 735 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `493 
f N "i2c_transfer" 2 736 ""
v L "stream" 2 736 "int8" `500 
v L "address" 2 736 "int8" `501 
v L "wData" 2 736 "*int8" `502 
v L "wCount" 2 736 "int8" `503 
f B "i2c_transfer" 2 736 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `499 
f N "i2c_transfer" 2 737 ""
v L "stream" 2 737 "int8" `505 
v L "address" 2 737 "int8" `506 
v L "wData" 2 737 "*int8" `507 
v L "wCount" 2 737 "int8" `508 
v L "rData" 2 737 "*int8" `509 
v L "rCount" 2 737 "*int8" `510 
f B "i2c_transfer" 2 737 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `504 
f N "i2c_transfer_out" 2 738 ""
v L "address" 2 738 "int8" `512 
v L "wData" 2 738 "*int8" `513 
v L "wCount" 2 738 "int8" `514 
f B "i2c_transfer_out" 2 738 "int8(int8 address,*int8 wData,int8 wCount)" `511 
f N "i2c_transfer_out" 2 739 ""
v L "stream" 2 739 "int8" `516 
v L "address" 2 739 "int8" `517 
v L "wData" 2 739 "*int8" `518 
v L "wCount" 2 739 "int8" `519 
f B "i2c_transfer_out" 2 739 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `515 
f N "i2c_transfer_in" 2 740 ""
v L "address" 2 740 "int8" `521 
v L "rData" 2 740 "*int8" `522 
v L "rCount" 2 740 "int8" `523 
f B "i2c_transfer_in" 2 740 "int8(int8 address,*int8 rData,int8 rCount)" `520 
f N "i2c_transfer_in" 2 741 ""
v L "stream" 2 741 "int8" `525 
v L "address" 2 741 "int8" `526 
v L "rData" 2 741 "*int8" `527 
v L "rCount" 2 741 "int8" `528 
f B "i2c_transfer_in" 2 741 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `524  "#use spi() Prototypes:"
f N "spi_xfer" 2 744 ""
f B "spi_xfer" 2 744 "int8()" `529 
f N "spi_xfer" 2 745 ""
f G "spi_xfer" 2 745 "int16()" `530 
f N "spi_xfer" 2 746 ""
f G "spi_xfer" 2 746 "int32()" `530 
f N "spi_xfer" 2 747 ""
v L "data" 2 747 "int8" `531 
f B "spi_xfer" 2 747 "int8(int8 data)" `530 
f N "spi_xfer" 2 748 ""
v L "data" 2 748 "int16" `533 
f B "spi_xfer" 2 748 "int16(int16 data)" `532 
f N "spi_xfer" 2 749 ""
v L "data" 2 749 "int32" `535 
f B "spi_xfer" 2 749 "int32(int32 data)" `534 
f N "spi_xfer" 2 750 ""
v L "stream" 2 750 "int8" `537 
v L "data" 2 750 "int8" `538 
f B "spi_xfer" 2 750 "int8(int8 stream,int8 data)" `536 
f N "spi_xfer" 2 751 ""
v L "stream" 2 751 "int8" `540 
v L "data" 2 751 "int16" `541 
f B "spi_xfer" 2 751 "int16(int8 stream,int16 data)" `539 
f N "spi_xfer" 2 752 ""
v L "stream" 2 752 "int8" `543 
v L "data" 2 752 "int32" `544 
f B "spi_xfer" 2 752 "int32(int8 stream,int32 data)" `542 
f N "spi_xfer" 2 753 ""
v L "stream" 2 753 "int8" `546 
v L "data" 2 753 "int8" `547 
v L "bits" 2 753 "int8" `548 
f B "spi_xfer" 2 753 "int8(int8 stream,int8 data,int8 bits)" `545 
f N "spi_xfer" 2 754 ""
v L "stream" 2 754 "int8" `550 
v L "data" 2 754 "int16" `551 
v L "bits" 2 754 "int8" `552 
f B "spi_xfer" 2 754 "int16(int8 stream,int16 data,int8 bits)" `549 
f N "spi_xfer" 2 755 ""
v L "stream" 2 755 "int8" `554 
v L "data" 2 755 "int32" `555 
v L "bits" 2 755 "int8" `556 
f B "spi_xfer" 2 755 "int32(int8 stream,int32 data,int8 bits)" `553 
f N "spi_init" 2 756 ""
v L "baud" 2 756 "int32" `558 
f B "spi_init" 2 756 "void(int32 baud)" `557 
f N "spi_init" 2 757 ""
v L "stream" 2 757 "int8" `560 
v L "baud" 2 757 "int32" `561 
f B "spi_init" 2 757 "void(int8 stream,int32 baud)" `559 
f N "spi_speed" 2 758 ""
v L "baud" 2 758 "int32" `563 
f B "spi_speed" 2 758 "void(int32 baud)" `562 
f N "spi_speed" 2 759 ""
v L "stream" 2 759 "int8" `565 
v L "baud" 2 759 "int32" `566 
f B "spi_speed" 2 759 "void(int8 stream,int32 baud)" `564 
f N "spi_speed" 2 760 ""
v L "stream" 2 760 "int8" `568 
v L "baud" 2 760 "int32" `569 
v L "clock" 2 760 "int32" `570 
f B "spi_speed" 2 760 "void(int8 stream,int32 baud,int32 clock)" `567 
f N "spi_prewrite" 2 761 ""
v L "data" 2 761 "int8" `572 
f B "spi_prewrite" 2 761 "void(int8 data)" `571 
f N "spi_prewrite" 2 762 ""
v L "data" 2 762 "int16" `574 
f B "spi_prewrite" 2 762 "void(int16 data)" `573 
f N "spi_prewrite" 2 763 ""
v L "data" 2 763 "int32" `576 
f B "spi_prewrite" 2 763 "void(int32 data)" `575 
f N "spi_prewrite" 2 764 ""
v L "??65535" 2 764 "int8" `578 
v L "data" 2 764 "int8" `579 
f B "spi_prewrite" 2 764 "void(int8 ,int8 data)" `577 
f N "spi_prewrite" 2 765 ""
v L "??65535" 2 765 "int8" `581 
v L "data" 2 765 "int16" `582 
f B "spi_prewrite" 2 765 "void(int8 ,int16 data)" `580 
f N "spi_prewrite" 2 766 ""
v L "??65535" 2 766 "int8" `584 
v L "data" 2 766 "int32" `585 
f B "spi_prewrite" 2 766 "void(int8 ,int32 data)" `583 
f N "spi_xfer_in" 2 767 ""
f B "spi_xfer_in" 2 767 "int8()" `586 
f N "spi_xfer_in" 2 768 ""
f G "spi_xfer_in" 2 768 "int16()" `587 
f N "spi_xfer_in" 2 769 ""
f G "spi_xfer_in" 2 769 "int32()" `587 
f N "spi_xfer_in" 2 770 ""
v L "bits" 2 770 "int8" `588 
f B "spi_xfer_in" 2 770 "int8(int8 bits)" `587 
f N "spi_xfer_in" 2 771 ""
v L "bits" 2 771 "int8" `590 
f G "spi_xfer_in" 2 771 "int16(int8 bits)" `589 
f N "spi_xfer_in" 2 772 ""
v L "bits" 2 772 "int8" `590 
f G "spi_xfer_in" 2 772 "int32(int8 bits)" `589 
f N "spi_xfer_in" 2 773 ""
v L "stream" 2 773 "int8" `590 
v L "bits" 2 773 "int8" `591 
f B "spi_xfer_in" 2 773 "int8(int8 stream,int8 bits)" `589 
f N "spi_xfer_in" 2 774 ""
v L "stream" 2 774 "int8" `590 
v L "bits" 2 774 "int8" `594 
f G "spi_xfer_in" 2 774 "int16(int8 stream,int8 bits)" `592 
f N "spi_xfer_in" 2 775 ""
v L "stream" 2 775 "int8" `590 
v L "bits" 2 775 "int8" `594 
f G "spi_xfer_in" 2 775 "int32(int8 stream,int8 bits)" `592  "#use rtos() Prototypes:"
f N "rtos_run" 2 778 ""
f B "rtos_run" 2 778 "void(int8 stream,int8 bits)" `592 
f N "rtos_yield" 2 779 ""
f B "rtos_yield" 2 779 "void(int8 bits)" `593 
f N "rtos_enable" 2 780 ""
v L "task" 2 780 "int8" `595 
f B "rtos_enable" 2 780 "void(int8 task)" `594 
f N "rtos_disable" 2 781 ""
v L "task" 2 781 "int8" `597 
f B "rtos_disable" 2 781 "void(int8 task)" `596 
f N "rtos_terminate" 2 782 ""
f B "rtos_terminate" 2 782 "void()" `598 
f N "rtos_await" 2 783 ""
v L "flag" 2 783 "int8" `600 
f B "rtos_await" 2 783 "void(int8 flag)" `599 
f N "rtos_wait" 2 784 ""
v L "sem" 2 784 "int8" `602 
f B "rtos_wait" 2 784 "void(int8 sem)" `601 
f N "rtos_signal" 2 785 ""
v L "sem" 2 785 "int8" `604 
f B "rtos_signal" 2 785 "void(int8 sem)" `603 
f N "rtos_msg_send" 2 786 ""
v L "task" 2 786 "int8" `606 
v L "msg" 2 786 "int8" `607 
f B "rtos_msg_send" 2 786 "void(int8 task,int8 msg)" `605 
f N "rtos_msg_read" 2 787 ""
f B "rtos_msg_read" 2 787 "int8()" `608 
f N "rtos_msg_poll" 2 788 ""
f B "rtos_msg_poll" 2 788 "int8()" `609 
f N "rtos_overrun" 2 789 ""
v L "task" 2 789 "int8" `611 
f B "rtos_overrun" 2 789 "int8(int8 task)" `610 
f N "rtos_stats" 2 790 ""
v L "task" 2 790 "int8" `613 
v L "stat" 2 790 "*int8" `614 
f B "rtos_stats" 2 790 "void(int8 task,*int8 stat)" `612  "#use timer() Prototypes:"
f N "get_ticks" 2 793 ""
f B "get_ticks" 2 793 "int8()" `615 
f N "get_ticks" 2 794 ""
f G "get_ticks" 2 794 "int16()" `616 
f N "get_ticks" 2 795 ""
f G "get_ticks" 2 795 "int32()" `616 
f N "get_ticks" 2 796 ""
v L "stream" 2 796 "int8" `617 
f B "get_ticks" 2 796 "int8(int8 stream)" `616 
f N "get_ticks" 2 797 ""
v L "stream" 2 797 "int8" `619 
f G "get_ticks" 2 797 "int16(int8 stream)" `618 
f N "get_ticks" 2 798 ""
v L "stream" 2 798 "int8" `619 
f G "get_ticks" 2 798 "int32(int8 stream)" `618 
f N "set_ticks" 2 799 ""
v L "value" 2 799 "int8" `619 
f B "set_ticks" 2 799 "void(int8 value)" `618 
f N "set_ticks" 2 800 ""
v L "value" 2 800 "int16" `621 
f B "set_ticks" 2 800 "void(int16 value)" `620 
f N "set_ticks" 2 801 ""
v L "value" 2 801 "int32" `623 
f B "set_ticks" 2 801 "void(int32 value)" `622 
f N "set_ticks" 2 802 ""
v L "stream" 2 802 "int8" `625 
v L "value" 2 802 "int8" `626 
f B "set_ticks" 2 802 "void(int8 stream,int8 value)" `624 
f N "set_ticks" 2 803 ""
v L "stream" 2 803 "int8" `628 
v L "value" 2 803 "int16" `629 
f B "set_ticks" 2 803 "void(int8 stream,int16 value)" `627 
f N "set_ticks" 2 804 ""
v L "stream" 2 804 "int8" `631 
v L "value" 2 804 "int32" `632 
f B "set_ticks" 2 804 "void(int8 stream,int32 value)" `630  "#use pwm() Prototypes:"
f N "pwm_on" 2 807 ""
f B "pwm_on" 2 807 "void()" `633 
f N "pwm_on" 2 808 ""
v L "stream" 2 808 "int8" `635 
f B "pwm_on" 2 808 "void(int8 stream)" `634 
f N "pwm_off" 2 809 ""
f B "pwm_off" 2 809 "void()" `636 
f N "pwm_off" 2 810 ""
v L "stream" 2 810 "int8" `638 
f B "pwm_off" 2 810 "void(int8 stream)" `637 
f N "pwm_set_duty" 2 811 ""
v L "duty" 2 811 "int16" `640 
f B "pwm_set_duty" 2 811 "void(int16 duty)" `639 
f N "pwm_set_duty" 2 812 ""
v L "stream" 2 812 "int8" `642 
v L "duty" 2 812 "int16" `643 
f B "pwm_set_duty" 2 812 "void(int8 stream,int16 duty)" `641 
f N "pwm_set_duty_percent" 2 813 ""
v L "percent" 2 813 "int16" `645 
f B "pwm_set_duty_percent" 2 813 "void(int16 percent)" `644 
f N "pwm_set_duty_percent" 2 814 ""
v L "stream" 2 814 "int8" `647 
v L "percent" 2 814 "int16" `648 
f B "pwm_set_duty_percent" 2 814 "void(int8 stream,int16 percent)" `646 
f N "pwm_set_frequency" 2 815 ""
v L "frequency" 2 815 "int32" `650 
f B "pwm_set_frequency" 2 815 "void(int32 frequency)" `649 
f N "pwm_set_frequency" 2 816 ""
v L "stream" 2 816 "int8" `652 
v L "frequency" 2 816 "int32" `653 
f B "pwm_set_frequency" 2 816 "void(int8 stream,int32 frequency)" `651  "#use capture() Prototypes:"
f N "get_capture_time" 2 819 ""
f B "get_capture_time" 2 819 "int16()" `654 
f N "get_capture_time" 2 820 ""
v L "stream" 2 820 "int8" `656 
f B "get_capture_time" 2 820 "int16(int8 stream)" `655 
f N "get_capture_event" 2 821 ""
f B "get_capture_event" 2 821 "int8()" `657 
f N "get_capture_event" 2 822 ""
v L "stream" 2 822 "int8" `659 
f B "get_capture_event" 2 822 "int8(int8 stream)" `658  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 835 ""
v L "address" 2 835 "int32" `661 
f B "goto_address" 2 835 "void(int32 address)" `660 
f N "label_address" 2 836 ""
v L "label" 2 836 "int32" `663 
f B "label_address" 2 836 "int32(int32 label)" `662  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 839 ""
v L "address" 2 839 "int32" `665 
v L "dataptr" 2 839 "*int8" `666 
v L "count" 2 839 "int16" `667 
f B "read_program_memory" 2 839 "void(int32 address,*int8 dataptr,int16 count)" `664 
f N "read_program_eeprom" 2 840 ""
v L "address" 2 840 "int32" `669 
f B "read_program_eeprom" 2 840 "int16(int32 address)" `668  "Program Memory Write Prototypes:"
f N "write_program_memory" 2 843 ""
v L "address" 2 843 "int32" `671 
v L "dataptr" 2 843 "*int8" `672 
v L "count" 2 843 "int16" `673 
f B "write_program_memory" 2 843 "void(int32 address,*int8 dataptr,int16 count)" `670 
f N "write_program_eeprom" 2 844 ""
v L "address" 2 844 "int32" `675 
v L "data" 2 844 "int16" `676 
f B "write_program_eeprom" 2 844 "void(int32 address,int16 data)" `674  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 849 "unsigned int16"
f N "read_eeprom" 2 854 ""
v L "address" 2 854 "int16" `678 
f B "read_eeprom" 2 854 "int8(int16 address)" `677 
f N "write_eeprom" 2 855 ""
v L "address" 2 855 "int16" `680 
v L "value" 2 855 "int8" `681 
f B "write_eeprom" 2 855 "void(int16 address,int8 value)" `679  "#use touchpad() Prototypes:"
f N "touchpad_state" 2 858 ""
v L "state" 2 858 "int8" `683 
f B "touchpad_state" 2 858 "void(int8 state)" `682 
f N "touchpad_getc" 2 859 ""
f B "touchpad_getc" 2 859 "int8()" `684 
f N "touchpad_hit" 2 860 ""
f B "touchpad_hit" 2 860 "int8()" `685  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 866 ""
v L "interrupt" 2 866 "int32" `687 
f B "enable_interrupts" 2 866 "void(int32 interrupt)" `686 
f N "disable_interrupts" 2 867 ""
v L "interrupt" 2 867 "int32" `689 
f B "disable_interrupts" 2 867 "void(int32 interrupt)" `688 
f N "clear_interrupt" 2 868 ""
v L "interrupt" 2 868 "int32" `691 
f B "clear_interrupt" 2 868 "void(int32 interrupt)" `690 
f N "interrupt_active" 2 869 ""
v L "interrupt" 2 869 "int32" `693 
f B "interrupt_active" 2 869 "int8(int32 interrupt)" `692 
f N "interrupt_enabled" 2 870 ""
v L "interrupt" 2 870 "int32" `695 
f B "interrupt_enabled" 2 870 "int8(int32 interrupt)" `694 
f N "ext_int_edge" 2 871 ""
v L "source" 2 871 "int8" `697 
v L "edge" 2 871 "int8" `698 
f B "ext_int_edge" 2 871 "void(int8 source,int8 edge)" `696 
f N "jump_to_isr" 2 872 ""
v L "address" 2 872 "int16" `700 
f B "jump_to_isr" 2 872 "void(int16 address)" `699  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 874 "0x40"
d G "H_TO_L" 2 875 "0"
d G "GLOBAL" 2 877 "0xF2C0"
d G "PERIPH" 2 878 "0xF240"
d G "INT_RTCC" 2 879 "0x00F220"
d G "INT_TIMER0" 2 880 "0x00F220"
d G "INT_TIMER1" 2 881 "0x009D01"
d G "INT_TIMER2" 2 882 "0x009D02"
d G "INT_TIMER3" 2 883 "0x00A002"
d G "INT_EXT_L2H" 2 884 "0x5000F210"
d G "INT_EXT_H2L" 2 885 "0x6000F210"
d G "INT_EXT" 2 886 "0x00F210"
d G "INT_EXT1_L2H" 2 887 "0x5001F008"
d G "INT_EXT1_H2L" 2 888 "0x6001F008"
d G "INT_EXT1" 2 889 "0x00F008"
d G "INT_EXT2_L2H" 2 890 "0x5002F010"
d G "INT_EXT2_H2L" 2 891 "0x6002F010"
d G "INT_EXT2" 2 892 "0x00F010"
d G "INT_RB" 2 893 "0x01FFF208"
d G "INT_AD" 2 894 "0x009D40"
d G "INT_RDA" 2 895 "0x009D20"
d G "INT_TBE" 2 896 "0x009D10"
d G "INT_SSP" 2 897 "0x009D08"
d G "INT_BUSCOL" 2 898 "0x00A008"
d G "INT_RDA2" 2 899 "0x00A320"
d G "INT_TBE2" 2 900 "0x00A310"
d G "INT_OSCF" 2 901 "0x00A080"
d G "INT_HLVD" 2 902 "0x00A004"
d G "INT_EXT3_L2H" 2 903 "0x5003F020"
d G "INT_EXT3_H2L" 2 904 "0x6003F020"
d G "INT_EXT3" 2 905 "0x00F020"
d G "INT_CCP1" 2 906 "0x00A302"
d G "INT_CCP2" 2 907 "0x00A304"
d G "INT_CTMU" 2 908 "0x00A308"
d G "INT_TMR1G" 2 909 "0x009D04"
d G "INT_TMR3G" 2 910 "0x00A001"
d G "INT_CCP3" 2 911 "0x00B601"
d G "INT_CCP4" 2 912 "0x00B602"
d G "INT_CCP5" 2 913 "0x00B604"
d G "INT_COMP1" 2 914 "0x00B610"
d G "INT_COMP2" 2 915 "0x00B620"
d G "INT_EEPROM" 2 916 "0x00B640"
d G "INT_TIMER4" 2 917 "0x00B680"
d G "INT_CANRX0" 2 918 "0x007601"
d G "INT_CANRX1" 2 919 "0x007602"
d G "INT_CANTX0" 2 920 "0x007604"
d G "INT_CANTX1" 2 921 "0x007608"
d G "INT_CANTX2" 2 922 "0x007610"
d G "INT_CANERR" 2 923 "0x007620"
d G "INT_CANWAKE" 2 924 "0x007640"
d G "INT_CANIRX" 2 925 "0x007680"
d G "INT_RB4" 2 926 "0x110F208"
d G "INT_RB5" 2 927 "0x120F208"
d G "INT_RB6" 2 928 "0x140F208"
d G "INT_RB7" 2 929 "0x180F208"
D G "_STDLIB" 3 13 ""
D G "RAND_MAX" 3 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 26 "1"
T G "div_t" 3 34 "{sint8 quot,sint8 rem}" `704 
T G "ldiv_t" 3 39 "{sint16 quot,sint16 rem}" `708  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "unsigned char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 3 44 2 "FUNCTION"
C L "jump_to_isr" 3 47 1 "*"
C L "jump_to_isr" 3 47 1 "*"
F N "atoi" 3 51 ""
V L "s" 3 51 "*int8" `710 
f G "atoi" 3 51 "sint8(*int8 s)" `709  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 3 59 ""
V L "s" 3 59 "*int8" `712 
f G "atoi32" 3 59 "sint32(*int8 s)" `711  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 3 47 2 "FUNCTION"
F N "itoa" 3 80 ""
V L "num" 3 80 "sint32" `714 
V L "base" 3 80 "int8" `715 
V L "s" 3 80 "*int8" `716 
f G "itoa" 3 80 "*int8(sint32 num,int8 base,*int8 s)" `713  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 82 1 "*"
C L "itoa" 3 82 1 "*"
F N "atol" 3 86 ""
V L "s" 3 86 "*int8" `718 
f G "atol" 3 86 "sint16(*int8 s)" `717  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
F N "strtol" 3 94 ""
V L "s" 3 94 "*int8" `720 
V L "endptr" 3 94 "*int8" `721 
V L "base" 3 94 "sint8" `722 
f G "strtol" 3 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `719  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
F N "strtoul" 3 102 ""
V L "s" 3 102 "*int8" `724 
V L "endptr" 3 102 "*int8" `725 
V L "base" 3 102 "sint8" `726 
f G "strtoul" 3 102 "int16(*int8 s,*int8 endptr,sint8 base)" `723  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 96 2 "FUNCTION"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
F N "strtof" 3 111 ""
V L "s" 3 111 "*int8" `728 
V L "endptr" 3 111 "??0 *" `729 
f G "strtof" 3 111 "float(*int8 s,??0 * endptr)" `727  "provided for compatibility"
D G "strtof48" 3 117 "(s,e) strtof(s, e)"
D G "strtod" 3 118 "(s,e) strtof(s, e)"
C L "strtof" 3 104 1 "FUNCTION"
C L "strtof" 3 121 1 "*"
D G "atof" 3 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 3 121 1 "FUNCTION"
C L "strtof" 3 144 1 "*"
C L "strtof" 3 144 1 "*"
C L "strtof" 3 144 1 "*"
F N "atoe" 3 150 ""
V L "s" 3 150 "*int8" `732 
f G "atoe" 3 150 "float(*int8 s)" `731  "Pseudo-random sequence generation functions"
C L "atoe" 3 144 1 "FUNCTION"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
F N "rand" 3 170 ""
f G "rand" 3 170 "int16()" `733  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
F N "srand" 3 192 ""
V L "seed" 3 192 "int32" `735 
f G "srand" 3 192 "void(int32 seed)" `734  "Memory management functions"
C L "srand" 3 172 3 "FUNCTION"
F N "system" 3 206 ""
V L "string" 3 206 "*int8" `737 
f G "system" 3 206 "sint8(*int8 string)" `736  "Searching and sorting utilities"
C L "system" 3 172 1 "FUNCTION"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 4 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
D G "labs" 3 250 "abs"
F N "div" 3 252 ""
V L "numer" 3 252 "sint8" `739 
V L "denom" 3 252 "sint8" `740 
f G "div" 3 252 "div_t(sint8 numer,sint8 denom)" `738 
F N "ldiv" 3 253 ""
V L "numer" 3 253 "sint16" `742 
V L "denom" 3 253 "sint16" `743 
f G "ldiv" 3 253 "ldiv_t(sint16 numer,sint16 denom)" `741  "Multibyte character functions"
C L "ldiv" 3 230 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
F N "memmove" 5 34 ""
V L "s1" 5 34 "*void" `745 
V L "s2" 5 34 "*void" `746 
V L "n" 5 34 "int16" `747 
F G "memmove" 5 35 "*int8(*void s1,*void s2,int16 n)" `744 
V L "sc1" 5 36 "*int8" `748 
V L "sc2" 5 37 "*int8" `749 
D G "strcopy" 5 54 "strcpy"
F N "strncpy" 5 61 ""
V L "s1" 5 61 "*int8" `751 
V L "s2" 5 61 "*int8" `752 
V L "n" 5 61 "int16" `753 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `750 
V L "s" 5 63 "*int8" `754 
F N "strcat" 5 78 ""
V L "s1" 5 78 "*int8" `756 
V L "s2" 5 78 "*int8" `757 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `755 
V L "s" 5 80 "*int8" `758 
F N "strncat" 5 96 ""
V L "s1" 5 96 "*int8" `760 
V L "s2" 5 96 "*int8" `761 
V L "n" 5 96 "int16" `762 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `759 
V L "s" 5 98 "*int8" `763 
C L "memcmp" 5 19 3 "FUNCTION"
F N "memcmp" 5 120 ""
V L "s1" 5 120 "*void" `765 
V L "s2" 5 120 "*void" `766 
V L "n" 5 120 "int16" `767 
F G "memcmp" 5 121 "sint8(*void s1,*void s2,int16 n)" `764 
V L "su1" 5 122 "*int8" `768 
V L "su2" 5 122 "*int8" `769 
C L "strcmp" 5 19 2 "FUNCTION"
F N "strcmp" 5 134 ""
V L "s1" 5 134 "*int8" `771 
V L "s2" 5 134 "*int8" `772 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `770 
C L "strcoll" 5 19 2 "FUNCTION"
F N "strcoll" 5 144 ""
V L "s1" 5 144 "*int8" `774 
V L "s2" 5 144 "*int8" `775 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `773 
C L "strncmp" 5 19 4 "FUNCTION"
F N "strncmp" 5 157 ""
V L "s1" 5 157 "*int8" `777 
V L "s2" 5 157 "*int8" `778 
V L "n" 5 157 "int16" `779 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `776 
C L "strxfrm" 5 19 4 "FUNCTION"
F N "strxfrm" 5 170 ""
V L "s1" 5 170 "*int8" `781 
V L "s2" 5 170 "*int8" `782 
V L "n" 5 170 "int16" `783 
F G "strxfrm" 5 171 "int16(*int8 s1,*int8 s2,int16 n)" `780 
V L "c" 5 172 "int8" `784 
V L "n1" 5 173 "int8" `785 
C L "strxfrm" 5 19 1 "FUNCTION"
F N "memchr" 5 201 ""
V L "s" 5 201 "*void" `787 
V L "c" 5 201 "int8" `788 
V L "n" 5 201 "int16" `789 
F G "memchr" 5 202 "*int8(*void s,int8 c,int16 n)" `786 
V L "uc" 5 203 "int8" `790 
V L "su" 5 204 "*int8" `791 
F N "strchr" 5 215 ""
V L "s" 5 215 "*int8" `793 
V L "c" 5 215 "int8" `794 
F G "strchr" 5 216 "*int8(*int8 s,int8 c)" `792 
C L "strcspn" 5 19 4 "FUNCTION"
F N "strcspn" 5 227 ""
V L "s1" 5 227 "*int8" `796 
V L "s2" 5 227 "*int8" `797 
F G "strcspn" 5 228 "int8(*int8 s1,*int8 s2)" `795 
V L "sc1" 5 229 "*int8" `798 
V L "sc2" 5 229 "*int8" `799 
F N "strpbrk" 5 242 ""
V L "s1" 5 242 "*int8" `801 
V L "s2" 5 242 "*int8" `802 
F G "strpbrk" 5 243 "*int8(*int8 s1,*int8 s2)" `800 
V L "sc1" 5 244 "*int8" `803 
V L "sc2" 5 244 "*int8" `804 
F N "strrchr" 5 257 ""
V L "s" 5 257 "*int8" `806 
V L "c" 5 257 "int8" `807 
F G "strrchr" 5 258 "*int8(*int8 s,int8 c)" `805 
V L "p" 5 259 "*int8" `808 
C L "strspn" 5 19 2 "FUNCTION"
F N "strspn" 5 272 ""
V L "s1" 5 272 "*int8" `810 
V L "s2" 5 272 "*int8" `811 
F G "strspn" 5 273 "int8(*int8 s1,*int8 s2)" `809 
V L "sc1" 5 274 "*int8" `812 
V L "sc2" 5 274 "*int8" `813 
F N "strstr" 5 291 ""
V L "s1" 5 291 "*int8" `815 
V L "s2" 5 291 "*int8" `816 
F G "strstr" 5 292 "*int8(*int8 s1,*int8 s2)" `814 
V L "s" 5 293 "*int8" `817 
V L "t" 5 293 "*int8" `818 
C L "strlen" 5 19 2 "FUNCTION"
F N "strlen" 5 318 ""
V L "s" 5 318 "*int8" `820 
F G "strlen" 5 319 "int16(*int8 s)" `819 
V L "sc" 5 320 "*int8" `821 
F N "strtok" 5 341 ""
V L "s1" 5 341 "*int8" `823 
V L "s2" 5 341 "*int8" `824 
F G "strtok" 5 342 "*int8(*int8 s1,*int8 s2)" `822 
V L "beg" 5 343 "*int8" `825 
V L "end" 5 343 "*int8" `826 
V L "save" 5 344 "*int8" `827 
C L "stricmp" 5 19 6 "FUNCTION"
F N "stricmp" 5 392 ""
V L "s1" 5 392 "*int8" `829 
V L "s2" 5 392 "*int8" `830 
F G "stricmp" 5 393 "sint8(*int8 s1,*int8 s2)" `828 
F N "strlwr" 5 406 ""
V L "s" 5 406 "*int8" `834 
F G "strlwr" 5 407 "*int8(*int8 s)" `833 
V L "p" 5 408 "*int8" `835 
F N "strupr" 5 420 ""
V L "s" 5 420 "*int8" `837 
F G "strupr" 5 421 "*int8(*int8 s)" `836 
V L "p" 5 422 "*int8" `838 
F N "div" 3 275 ""
V L "numer" 3 275 "sint8" `739 
V L "denom" 3 275 "sint8" `841 
F G "div" 3 276 "div_t(sint8 numer,sint8 denom)" `738 
V L "val" 3 277 "div_t" `839 
F N "ldiv" 3 283 ""
V L "numer" 3 283 "sint16" `742 
V L "denom" 3 283 "sint16" `848 
F G "ldiv" 3 284 "ldiv_t(sint16 numer,sint16 denom)" `741 
V L "val" 3 285 "ldiv_t" `846 
F N "atoe" 3 362 ""
V L "s" 3 362 "*int8" `854 
F G "atoe" 3 363 "float(*int8 s)" `731 
V L "pow10" 3 364 "float" `853 
V L "result" 3 365 "float" `854 
V L "sign" 3 366 "int8" `855 
V L "expsign" 3 367 "int8" `856 
V L "c" 3 368 "int8" `857 
V L "ptr" 3 369 "int8" `858 
V L "i" 3 370 "int8" `859 
V L "exp" 3 371 "float" `860 
V L "expcnt" 3 372 "int8" `861 
C L "atoe" 3 398 1 "FUNCTION"
F N "atoi" 3 430 ""
V L "s" 3 430 "*int8" `874 
F G "atoi" 3 431 "sint8(*int8 s)" `709 
V L "result" 3 432 "sint8" `873 
V L "sign" 3 433 "int8" `874 
V L "base" 3 433 "int8" `875 
V L "index" 3 433 "int8" `876 
V L "c" 3 434 "int8" `877 
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
F N "atol" 3 499 ""
V L "s" 3 499 "*int8" `879 
F G "atol" 3 500 "sint16(*int8 s)" `717 
V L "result" 3 501 "sint16" `878 
V L "sign" 3 502 "int8" `879 
V L "base" 3 502 "int8" `880 
V L "index" 3 502 "int8" `881 
V L "c" 3 503 "int8" `882 
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "mult_with10" 3 398 1 "FUNCTION"
F N "mult_with10" 3 566 ""
V L "num" 3 566 "int32" `884 
F G "mult_with10" 3 567 "sint32(int32 num)" `883 
F N "atoi32" 3 572 ""
V L "s" 3 572 "*int8" `886 
F G "atoi32" 3 573 "sint32(*int8 s)" `711 
V L "result" 3 574 "sint32" `885 
V L "sign" 3 575 "int8" `886 
V L "base" 3 575 "int8" `887 
V L "index" 3 575 "int8" `888 
V L "c" 3 576 "int8" `889 
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
F N "itoa" 3 771 ""
V L "num" 3 771 "sint32" `714 
V L "base" 3 771 "int8" `715 
V L "s" 3 771 "*int8" `893 
F G "itoa" 3 772 "*int8(sint32 num,int8 base,*int8 s)" `713 
V L "temp" 3 773 "int32" `890 
V L "i" 3 774 "int8" `891 
V L "sign" 3 774 "int8" `892 
V L "cnt" 3 774 "int8" `893 
V L "c" 3 775 "int8" `894 
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
F N "strtof" 3 886 ""
V L "s" 3 886 "*int8" `728 
V L "endptr" 3 886 "??0 *" `903 
F G "strtof" 3 887 "float(*int8 s,??0 * endptr)" `727 
V L "pow10" 3 888 "float" `901 
V L "result" 3 889 "float" `902 
V L "skip" 3 890 "int1" `903 
V L "sign" 3 890 "int1" `904 
V L "point" 3 890 "int1" `905 
V L "c" 3 891 "int8" `906 
V L "ptr" 3 892 "int8" `907 
F N "strtoul" 3 1104 ""
V L "s" 3 1104 "*int8" `724 
V L "endptr" 3 1104 "*int8" `725 
V L "base" 3 1104 "sint8" `912 
F G "strtoul" 3 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `723 
V L "sc" 3 1106 "*int8" `909 
V L "s1" 3 1106 "*int8" `910 
V L "sd" 3 1106 "*int8" `911 
V L "x" 3 1107 "int16" `912 
V L "sign" 3 1108 "int8" `913 
V L "digits" 3 1109 "int8[1]" `914 
C L "strtoul" 3 398 1 "FUNCTION"
C L "strtoul" 3 398 1 "FUNCTION"
C L "strtoul" 3 398 1 "FUNCTION"
F N "strtol" 3 1166 ""
V L "s" 3 1166 "*int8" `720 
V L "endptr" 3 1166 "*int8" `721 
V L "base" 3 1166 "sint8" `919 
F G "strtol" 3 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `719 
V L "sc" 3 1168 "*int8" `916 
V L "s1" 3 1168 "*int8" `917 
V L "sd" 3 1168 "*int8" `918 
V L "x" 3 1169 "sint16" `919 
V L "sign" 3 1170 "int8" `920 
V L "digits" 3 1171 "int8[1]" `921 
C L "strtol" 3 398 1 "FUNCTION"
C L "strtol" 3 398 1 "FUNCTION"
C L "strtol" 3 398 1 "FUNCTION"
F N "system" 3 1229 ""
V L "string" 3 1229 "*int8" `924 
F G "system" 3 1230 "sint8(*int8 string)" `736 
F N "mblen" 3 1234 ""
V L "s" 3 1234 "*int8" `924 
V L "n" 3 1234 "int16" `925 
F G "mblen" 3 1235 "int16(*int8 s,int16 n)" `923 
F N "mbtowc" 3 1239 ""
V L "pwc" 3 1239 "*int8" `927 
V L "s" 3 1239 "*int8" `928 
V L "n" 3 1239 "int16" `929 
F G "mbtowc" 3 1240 "int8(*int8 pwc,*int8 s,int16 n)" `926 
F N "wctomb" 3 1245 ""
V L "s" 3 1245 "*int8" `931 
V L "wchar" 3 1245 "int8" `932 
F G "wctomb" 3 1246 "int8(*int8 s,int8 wchar)" `930 
F N "mbstowcs" 3 1251 ""
V L "pwcs" 3 1251 "*int8" `934 
V L "s" 3 1251 "*int8" `935 
V L "n" 3 1251 "int16" `936 
F G "mbstowcs" 3 1252 "int16(*int8 pwcs,*int8 s,int16 n)" `933 
F N "wcstombs" 3 1257 ""
V L "s" 3 1257 "*int8" `938 
V L "pwcs" 3 1257 "*int8" `939 
V L "n" 3 1257 "int16" `940 
F G "wcstombs" 3 1258 "int16(*int8 s,*int8 pwcs,int16 n)" `937 
V G "_Randseed" 3 1267 "int32" `941 
F N "rand" 3 1269 ""
F G "rand" 3 1270 "int16()" `733 
F N "srand" 3 1275 ""
V L "seed" 3 1275 "int32" `946 
F G "srand" 3 1276 "void(int32 seed)" `734 
F N "*_Cmpfun" 3 1285 ""
V L "p1" 3 1285 "*int8" `946 
V L "p2" 3 1285 "*int8" `947 
T G "*_Cmpfun" 3 1285 "sint8(*int8 p1,*int8 p2)" `945 
F N "qsort" 3 1292 ""
V L "qdata" 3 1292 "*int8" `950 
V L "qitems" 3 1292 "int8" `951 
V L "qsize" 3 1292 "int8" `952 
V L "cmp" 3 1292 "_Cmpfun" `953 
F G "qsort" 3 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `949 
V L "m" 3 1293 "int8" `954 
V L "j" 3 1293 "int8" `955 
V L "i" 3 1293 "int8" `956 
V L "l" 3 1293 "int8" `957 
V L "done" 3 1294 "int1" `958 
V L "t" 3 1295 "int8[16]" `959 
F N "bsearch" 3 1320 ""
V L "key" 3 1320 "*int8" `962 
V L "base" 3 1320 "*int8" `963 
V L "num" 3 1320 "int16" `964 
V L "width" 3 1320 "int16" `965 
V L "cmp" 3 1320 "_Cmpfun" `966 
F G "bsearch" 3 1321 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `961 
V L "p" 3 1322 "*int8" `967 
V L "q" 3 1322 "*int8" `968 
V L "n" 3 1323 "int16" `969 
V L "pivot" 3 1324 "int16" `970 
V L "val" 3 1325 "sint8" `971 
C L "bsearch" 3 398 1 "FUNCTION"
D G "interruptTime" 1 14 "5"
D G "Led" 1 15 "PIN_A0"
V G "AllowedFuntions" 1 35 "{int1 customData,int1 StatusData,int1 MIMEin,int1 MIMEout,int1 MimeACKResponse,int1 rqstGoInfo,int1 rqstActuator,int1 showGoInfo,int1 blockMIMEByACK,int1 showInputstatus,int1 sendInputstatus,int1 saveEepromDueInput}" `999 
V G "firmwareMajorVersion" 1 37 "int8" `1000 
V G "firmwareMinorVersion" 1 38 "int8" `1001 
V G "HardwareMajorVersion" 1 39 "int8" `1002 
V G "HardwareMinorVersion" 1 40 "int8" `1003 
D G "EEPGD" 7 8 "7"
D G "CFGS" 7 9 "6"
D G "WREN" 7 10 "2"
D G "WR" 7 11 "1"
D G "GIE" 7 12 "7"
D G "RD" 7 13 "0"
D G "MaxAddres" 7 16 "1023"
D G "MaxBlocks" 7 17 "24"
T G "Variables" 7 60 "{int16 MIMEackByGo,int32 MIMEackByServer,int16 MIMEmax,int1 MIMEoutEnabled,int1 MIMEinEnabled,int1 MIMEWaitACKtoSend,int1 MIMEautoResponseACK,int1 CScustomEnabled,int1 CSstatusEnabled,int1 HOSautoShowEnabled,int1 HOSrqstEnabled,int16 CSackByGo,int16 CSmax,int32 HOStimeToResquest,int8 ACTmode,int32 ACTtoReset,int32 ACTinReset,int32 ACTtimeOutPIN,int1 ACTstatus,int1 ACTenableClientRequest,int1 DBIheartBeatEnabled,int1 InputEnableShow,int1 InputEnablestatus,int1 InputEnableSaveEeprom,int1 InputValueToSave,int1 empty,int32 DBItimeToHeartBeat,int16 InputStatusDataId,int16 InputTimeToSense}" `1040 
V G "ValoresIniciales" 7 62 "Variables" `1041 
V G "EepromInputValueToSave" 7 63 "int1" `1042 
V G "BloqueEeprom" 7 64 "int8" `1043 
F N "EepromInit" 7 66 ""
f G "EepromInit" 7 66 "int8()" `1044 
F N "EepromSave" 7 67 ""
V L "Structura" 7 67 "Variables" `1046 
f G "EepromSave" 7 67 "void(Variables Structura)" `1045 
F N "CompareStructs" 7 68 ""
V L "StructA" 7 68 "Variables" `1048 
V L "StructB" 7 68 "Variables" `1049 
f G "CompareStructs" 7 68 "int8(Variables StructA,Variables StructB)" `1047 
F N "EeepromleerBloque" 7 69 ""
V L "bloque" 7 69 "int8" `1051 
V L "Structura" 7 69 " *" `1052 
f G "EeepromleerBloque" 7 69 "int8(int8 bloque, * Structura)" `1050 
F N "EepromEscribirBloque" 7 70 ""
V L "bloque" 7 70 "int8" `1054 
V L "Structura" 7 70 "Variables" `1055 
f G "EepromEscribirBloque" 7 70 "void(int8 bloque,Variables Structura)" `1053 
F N "EcribirEeprom" 7 71 ""
V L "add" 7 71 "int16" `1057 
V L "value" 7 71 "int8" `1058 
f G "EcribirEeprom" 7 71 "void(int16 add,int8 value)" `1056 
F N "LeerEeprom" 7 72 ""
V L "add" 7 72 "int16" `1060 
f G "LeerEeprom" 7 72 "int8(int16 add)" `1059 
D G "HandshakeRequest" 9 1 "0x01" "Go to external device  confirma que el dispositivo esta emparejado"
D G "ThirdPartyDataACK" 9 2 "0x02" "Go to external device  confirma que el mensaje third party se recibio"
D G "GoDeviceData" 9 3 "0x21" "Go to external device  contiene infomacion del go como rpm, vel, etc, si somos un dispositivo hos(id=4141) se envia cada 2 segundos y se le tiene que responder un el ACK con el comando 84, si no solo se envia como respuesta al comando requestDataMesage"
D G "BinaryDataResponse" 9 4 "0x22" "Go to external device  confirma que la transmision del"BinaryDataPacket (0x86)" se realizo exitoso o mal"
D G "BinaryDataPacketIN" 9 5 "0x23" "Go to external device  contiene el mensaje enviado desde el servidor"
D G "HandshakeConfirmation" 9 6 "0x81" "External device to Go  es la respuesta al comando "0x01" y contiene informacion como el external device que somos, si queremos ACK y si queremos el mensaje binary data formateado"
D G "ThirdPartyDataStatusData" 9 7 "0x80" "External device to Go  Se envia cuando se quiere reflejar un parametro en mygeotab y se le debe responder el comando 0x02 por parte del go"
D G "FreeFormatThirdPartyData" 9 8 "0x82" "External device to Go  Se envia cuando se quiere reflejar un customdata en mygeotab y se le debe responder el comando 0x02 por parte del go"
D G "DeviceDataACK" 9 9 "0x84" "External device to Go  Se envia como ACK al comando 0x21 cuando estamos en HOS device y tenemos hasta 30 segundos para enviarlo"
D G "RequestDeviceDataMessage" 9 10 "0x85" "External device to Go  Se envia cuando se quiere recibir el comando 0x21"
D G "BinaryDataPacketOUT" 9 11 "0x86" "External device to Go  Se envia cuando se enviar un binaryData al servidor"
D G "ThirdPartyPriorityStatusData" 9 12 "0x87" "External device to Go  Se envia cuando se quiere reflejar un parametro en mygeotab y se le debe responder el comando 0x02 por parte del go (si tiene el iridium puede que el mensaje salga por ahi)"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
T G "HOS_Message" 9 20 "{int8 MsgType,int8 MsgBodyLength,int8[250] data,int1 GoFormat}" `1066 
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
T G "HOS_DeviceData" 9 41 "{int32 DateTime,int32 Latitude,int32 Longitud,int8 Velocidad,int16 RPM,int32 Odometro,int1 GpsValid,int1 Ignition,int1 EngineActivity,int1 DateValid,int1 SpeedFromEngine,int1 OdometerFromEngine,int32 TripOdometer,int32 TotalEngineHours,int32 TripDuration,int32 GoID,int32 DriverId}" `1085 
T G "HOS_BinaryDataResponse" 9 46 "{int1 TransmissionSucces}" `1088 
T G "HOS_HandShakeConfirmation" 9 53 "{int16 ExternalDevice,int1 HandshakeConfirmationACK,int1 BinaryDataWrapping}" `1093 
T G "HOS_StatusData" 9 59 "{int16 DataID,int32 data}" `1097 
C L "LeerEeprom" 9 16 1 "FUNCTION"
T G "HOS_FreeFormat" 9 65 "{int8 Size,int8[27] data}" `1101 
C L "LeerEeprom" 9 16 1 "FUNCTION"
T G "HOS_BinaryDataPacket" 9 71 "{int8 Size,int8[250] data}" `1105 
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
C L "LeerEeprom" 9 16 1 "FUNCTION"
V G "GoIOXstatus" 9 109 "{int1 WattingACKmime,int16 p_timeOutMime,int16 n_timeOutMime,int16 maxMIMEs,int16 MIMESent,int32 MIMETime,int16 p_timeOutCustom,int16 n_timeOutCustom,int8 WattingACK,int16 timeToSync,int1 synchronized,int1 lastSynchronized,int1 msgReady,int16 maxCustoms,int16 customsSent,int32 CustomsTime,int32 p_TimetoRqstHOS,int32 n_TimetoRqstHOS,int1 WattingGoInfoResponse,int32 p_timeOutGoInfoResponse,int32 n_timeOutGoInfoResponse,int1 lastIgnition,int1 WattingACKmimeFromServer,int32 p_timeOutACKFromServer,int32 n_timeOutACKFromServer,int32 p_TimetoHearBeat,int32 n_TimetoHeratBeat,int1 HeartbeatEnable}" `1135 
V G "HOS_CHKA" 9 111 "int8" `1136 
V G "HOS_CHKB" 9 111 "int8" `1137 
V G "GoInfoDataReady" 9 112 "int1" `1138 
C L "LeerEeprom" 9 16 2 "FUNCTION"
V G "HOS_Command" 9 117 "int8" `1139 
C L "LeerEeprom" 9 16 1 "FUNCTION"
V G "Msg_Type" 9 118 "int8" `1140 
V G "Msg_Leng" 9 119 "int8" `1141 
V G "Msg_Data" 9 120 "int8[250]" `1142 
V G "Msg_Index" 9 121 "int8" `1143 
V G "Msg_ChkA" 9 122 "int8" `1144 
V G "Msg_ChkB" 9 123 "int8" `1145 
V G "GoInfo_Leng" 9 125 "int8" `1146 
V G "GoInfo_Data" 9 126 "int8[250]" `1147 
V G "Size_type" 9 128 "int8" `1148 
V G "type" 9 129 "int8[10]" `1149 
C L "LeerEeprom" 9 16 4 "FUNCTION"
F N "HOS_Init" 9 138 ""
f G "HOS_Init" 9 138 "void()" `1150 
F N "HOS_Set_Time" 9 139 ""
f G "HOS_Set_Time" 9 139 "void()" `1151 
F N "HOS_Set_Buffer" 9 140 ""
V L "Dato" 9 140 "int8" `1153 
f G "HOS_Set_Buffer" 9 140 "void(int8 Dato)" `1152 
F N "SentThirdPartyDataStatusData" 9 142 ""
V L "Prioritario" 9 142 "int8" `1155 
V L "Data_Id" 9 142 "int16" `1156 
V L "data" 9 142 "int32" `1157 
f G "SentThirdPartyDataStatusData" 9 142 "void(int8 Prioritario,int16 Data_Id,int32 data)" `1154 
F N "SentFreeFormatThirdPartyData" 9 143 ""
V L "Size" 9 143 "int8" `1159 
V L "data" 9 143 "*int8" `1160 
f G "SentFreeFormatThirdPartyData" 9 143 "void(int8 Size,*int8 data)" `1158 
F N "SentBinaryDataPacket" 9 144 ""
V L "Size" 9 144 "int8" `1162 
V L "data" 9 144 "*int8" `1163 
f G "SentBinaryDataPacket" 9 144 "void(int8 Size,*int8 data)" `1161 
F N "SentMIMEPacket" 9 145 ""
V L "Size" 9 145 "int16" `1165 
V L "data" 9 145 "*int8" `1166 
f G "SentMIMEPacket" 9 145 "void(int16 Size,*int8 data)" `1164 
F N "SentRequestDeviceDataMessage" 9 146 ""
f G "SentRequestDeviceDataMessage" 9 146 "void()" `1167 
F N "SentDeviceDataACK" 9 147 ""
f G "SentDeviceDataACK" 9 147 "void()" `1168 
F N "SentHandShakeRequest" 9 148 ""
f G "SentHandShakeRequest" 9 148 "void()" `1169 
F N "SentHandshakeConfirmation" 9 149 ""
V L "DeviceId" 9 149 "int16" `1171 
V L "ACKConfirmation" 9 149 "int8" `1172 
V L "BinaryDataWrapping" 9 149 "int8" `1173 
f G "SentHandshakeConfirmation" 9 149 "void(int16 DeviceId,int8 ACKConfirmation,int8 BinaryDataWrapping)" `1170 
F N "CheckSum" 9 150 ""
V L "data" 9 150 "int8" `1175 
f G "CheckSum" 9 150 "void(int8 data)" `1174 
F N "GetParameters" 9 151 ""
V L "result" 9 151 " *" `1177 
f G "GetParameters" 9 151 "void( * result)" `1176  "Eeprom registers defin"
C L "GetParameters" 8 2 14 "FUNCTION"
C L "GetParameters" 8 2 1 "*"
F N "HOS_Init" 8 23 ""
F G "HOS_Init" 8 24 "void()" `1150 
C L "HOS_Init" 8 2 1 "FUNCTION"
F N "HOS_Set_Time" 8 68 ""
F G "HOS_Set_Time" 8 69 "void()" `1151 
F N "HOS_Set_Buffer" 8 136 ""
V L "Dato" 8 136 "int8" `1179 
F G "HOS_Set_Buffer" 8 137 "void(int8 Dato)" `1152 
V L "A" 8 185 "int8" `1178 
V L "B" 8 185 "int8" `1179 
V L "i" 8 191 "int8" `1180 
C L "HOS_Set_Buffer" 8 2 1 "FUNCTION"
F N "SentThirdPartyDataStatusData" 8 216 ""
V L "Prioritario" 8 216 "int8" `1155 
V L "Data_Id" 8 216 "int16" `1156 
V L "data" 8 216 "int32" `1184 
F G "SentThirdPartyDataStatusData" 8 217 "void(int8 Prioritario,int16 Data_Id,int32 data)" `1154 
V L "DataOut" 8 221 "int8" `1181 
C L "SentThirdPartyDataStatusData" 8 2 1 "FUNCTION"
C L "SentThirdPartyDataStatusData" 8 2 1 "FUNCTION"
C L "SentThirdPartyDataStatusData" 8 2 1 "FUNCTION"
F N "SentFreeFormatThirdPartyData" 8 258 ""
V L "Size" 8 258 "int8" `1159 
V L "data" 8 258 "*int8" `1184 
F G "SentFreeFormatThirdPartyData" 8 259 "void(int8 Size,*int8 data)" `1158 
V L "DataOut" 8 263 "int8" `1182 
C L "SentFreeFormatThirdPartyData" 8 2 1 "FUNCTION"
V L "i" 8 275 "int8" `1183 
F N "SentBinaryDataPacket" 8 289 ""
V L "Size" 8 289 "int8" `1162 
V L "data" 8 289 "*int8" `1186 
F G "SentBinaryDataPacket" 8 290 "void(int8 Size,*int8 data)" `1161 
V L "DataOut" 8 294 "int8" `1184 
C L "SentBinaryDataPacket" 8 2 1 "FUNCTION"
C L "SentBinaryDataPacket" 8 2 1 "FUNCTION"
C L "SentBinaryDataPacket" 8 2 1 "FUNCTION"
C L "SentBinaryDataPacket" 8 2 1 "FUNCTION"
V L "i" 8 309 "int8" `1185 
C L "SentBinaryDataPacket" 8 2 1 "FUNCTION"
C L "SentBinaryDataPacket" 8 2 1 "FUNCTION"
C L "SentBinaryDataPacket" 8 2 1 "FUNCTION"
C L "SentBinaryDataPacket" 8 2 1 "FUNCTION"
F N "SentMIMEPacket" 8 328 ""
V L "Size" 8 328 "int16" `1165 
V L "data" 8 328 "*int8" `1188 
F G "SentMIMEPacket" 8 329 "void(int16 Size,*int8 data)" `1164 
V L "IndexDataIN" 8 330 "int16" `1186 
V L "BufferOut" 8 331 "int8[250]" `1187 
V L "indexPacket" 8 332 "int8" `1188 
V L "index_dataOut" 8 333 "int8" `1189 
V L "i" 8 337 "int8" `1190 
V L "Payload" 8 342 "int32" `1191 
V L "final" 8 348 "int1" `1192 
V L "j" 8 349 "int16" `1193 
C L "SentMIMEPacket" 8 2 1 "FUNCTION"
V L "index" 8 369 "int8" `1194 
V L "i" 8 377 "int8" `1195 
F N "SentRequestDeviceDataMessage" 8 395 ""
F G "SentRequestDeviceDataMessage" 8 396 "void()" `1167 
V L "DataOut" 8 400 "int8" `1196 
C L "SentRequestDeviceDataMessage" 8 2 1 "FUNCTION"
F N "SentDeviceDataACK" 8 419 ""
F G "SentDeviceDataACK" 8 420 "void()" `1168 
V L "DataOut" 8 424 "int8" `1197 
C L "SentDeviceDataACK" 8 2 1 "FUNCTION"
F N "SentHandShakeRequest" 8 441 ""
F G "SentHandShakeRequest" 8 442 "void()" `1169 
F N "SentHandshakeConfirmation" 8 447 ""
V L "DeviceId" 8 447 "int16" `1171 
V L "ACKConfirmation" 8 447 "int8" `1172 
V L "BinaryDataWrapping" 8 447 "int8" `1201 
F G "SentHandshakeConfirmation" 8 448 "void(int16 DeviceId,int8 ACKConfirmation,int8 BinaryDataWrapping)" `1170 
V L "DataOut" 8 452 "int8" `1198 
C L "SentHandshakeConfirmation" 8 2 1 "FUNCTION"
C L "SentHandshakeConfirmation" 8 2 1 "FUNCTION"
C L "SentHandshakeConfirmation" 8 2 1 "FUNCTION"
F N "CheckSum" 8 482 ""
V L "data" 8 482 "int8" `1200 
F G "CheckSum" 8 483 "void(int8 data)" `1174 
C L "CheckSum" 8 2 1 "FUNCTION"
F N "GetParameters" 8 490 ""
V L "Dato" 8 490 " *" `1200 
F G "GetParameters" 8 491 "void( * Dato)" `1176 
V L "result" 8 492 "HOS_DeviceData" `1199 
F N "SentFormatMIMEPacket" 8 514 ""
V L "comando" 8 514 "int8" `1201 
V L "Size" 8 514 "int8" `1202 
V L "data" 8 514 "*int8" `1203 
F G "SentFormatMIMEPacket" 8 515 "void(int8 comando,int8 Size,*int8 data)" `1200 
V L "BufferOut" 8 516 "int8[250]" `1204 
V L "index_dataOut" 8 517 "int8" `1205 
V L "ca" 8 518 "int8" `1206 
V L "cb" 8 519 "int8" `1207 
V L "i" 8 523 "int8" `1208 
V L "Payload" 8 527 "int32" `1209 
V L "j" 8 539 "int8" `1210 
V L "var" 8 541 "int8" `1211 
D G "Relay" 10 1 "PIN_C4"
D G "ActuadorONOFF" 10 3 "3"
D G "ActuadorTemporizado" 10 4 "5"
D G "ON" 10 6 "3"
D G "OFF" 10 7 "4"
D G "TimedOutput" 10 8 "5"
V G "A_LocalCMD" 10 9 "int8" `1212 
V G "valueToPutInOutput" 10 10 "int1" `1213 
V G "Actuator" 10 28 "{int1 ActivateTimedOutput,int32 TimeInReset,int32 TimeToReset,int32 TimeNow,int1 ActivateOutput,int1 CancelPetition,int8 OutputMode,int1 OutputState,int1 SaveValue,int8 LastPetition,int16 Pass,int32 P_TimeOutPass,int32 N_TimeOutPass,int1 WaittingPass}" `1229 
F N "Actuator_Init" 10 30 ""
f G "Actuator_Init" 10 30 "void()" `1230 
F N "Actuator_SetTime" 10 31 ""
f G "Actuator_SetTime" 10 31 "void()" `1231 
F N "Actuator_Set_Value" 10 32 ""
V L "status" 10 32 "int8" `1233 
f G "Actuator_Set_Value" 10 32 "void(int8 status)" `1232 
F N "Actuator_Init" 10 34 ""
F G "Actuator_Init" 10 35 "void()" `1230 
F N "Actuator_SetTime" 10 64 ""
F G "Actuator_SetTime" 10 65 "void()" `1231 
C L "Actuator_SetTime" 10 15 1 "FUNCTION"
F N "Actuator_Set_Value" 10 135 ""
V L "status" 10 135 "int8" `1235 
F G "Actuator_Set_Value" 10 136 "void(int8 status)" `1232 
D G "msjOK" 11 1 "1"
D G "chkFail" 11 2 "2"
D G "formatFail" 11 3 "3"
D G "free" 11 4 "255"
D G "PingRequest" 11 6 "0x00"
D G "Pingresponse" 11 7 "0x01"
D G "MsgFailACK" 11 9 "0x08"
D G "MsgFailFormat" 11 10 "0x09"
D G "TextMsg" 11 12 "0x10"
D G "TextMsgFromServer" 11 13 "0x11"
D G "TextMsgReceived" 11 14 "0x12"
D G "TextMsgSent" 11 15 "0x13"
D G "TextMsgDelivered" 11 16 "0x15"
D G "TextMsgFailed" 11 17 "0x16"
D G "TextMsgFromServerNotSupported" 11 18 "0x17"
D G "TextMsgLimitReached" 11 19 "0x18"
D G "ShowGoInfoError" 11 22 "0x29"
D G "GetVehicleInfo" 11 23 "0x30"
D G "ShowVehicleInfo" 11 24 "0x31"
D G "GetIOXStatus" 11 25 "0x32"
D G "ShowIOXstatus" 11 26 "0x33"
D G "SendStatusData" 11 27 "0x34"
D G "StatusDataReceived" 11 28 "0x35"
D G "StatusDataSent" 11 29 "0x36"
D G "SendCustomData" 11 30 "0x37"
D G "CustomDataReceived" 11 31 "0x38"
D G "CustomDataSent" 11 32 "0x39"
D G "CustomDataLimitReached" 11 33 "0x40"
D G "CommandNotAllowed" 11 34 "0x41"
D G "StopWattingMIMEACK" 11 35 "0x42"
D G "MIMEACKWattingStopped" 11 36 "0x43"
D G "MIMEWattingACK" 11 37 "0x44"
D G "StopWattingCSACK" 11 38 "0x45"
D G "CSACKWattingStopped" 11 39 "0x46"
D G "CSWattingACK" 11 40 "0x47"
D G "GetIgnitionstatus" 11 41 "0x48"
D G "ShowIgnitionStatus" 11 42 "0x49"
D G "GetActuatorMode" 11 44 "0x50"
D G "ShowActuatorMode" 11 45 "0x51"
D G "SetTimedOutput" 11 46 "0x52"
D G "SetOuputOnOff" 11 47 "0x53"
D G "ShowTimedOutputReason" 11 48 "0x54"
D G "ShowOutputReason" 11 49 "0x55"
D G "CancelOutput" 11 50 "0x56"
D G "CancelResult" 11 51 "0x57"
D G "GetOutputStatus" 11 52 "0x58"
D G "ShowOutputStatus" 11 53 "0x59"
D G "ResetDBI" 11 55 "0x60"
D G "ResetDBIByServer" 11 56 "0x61"
D G "ResetDBIByClient" 11 57 "0x62"
D G "ResetDBIByAutomatic" 11 58 "0x63"
D G "DBIInitialized" 11 59 "0x64"
D G "RqstFW" 11 60 "0x65"
D G "AsnwFW" 11 61 "0x66"
D G "RqstHW" 11 62 "0x67"
D G "AsnwHW" 11 63 "0x68"
D G "DBIGetSerie" 11 64 "0x69" "<>"
D G "InputGetStatus" 11 66 "0x70"
D G "InputShowStatus" 11 67 "0x71"
D G "LengthInvalid" 11 69 "0xFE"
D G "ComandoUnidentified" 11 70 "0xFF"
V G "sentByPC" 11 72 "int1" `1234 
V G "pc_CMD" 11 74 "int8" `1235 
V G "pc_Index" 11 75 "int8" `1236 
V G "chkA" 11 76 "int8" `1237 
V G "chkB" 11 77 "int8" `1238 
V G "pc_result" 11 78 "int8" `1239 
V G "msgFromPC" 11 86 "{int8 chkA,int8 chkB,int8 comando,int8 Longitud,int8[200] Dato}" `1246 
F N "set_BufferPC" 11 88 ""
V L "data" 11 88 "int8" `1248 
f G "set_BufferPC" 11 88 "void(int8 data)" `1247 
F N "sendToPC" 11 89 ""
V L "Command" 11 89 "int8" `1250 
V L "length" 11 89 "int8" `1251 
V L "data" 11 89 "*int8" `1252 
f G "sendToPC" 11 89 "void(int8 Command,int8 length,*int8 data)" `1249 
F N "set_BufferPC" 11 91 ""
V L "data" 11 91 "int8" `1254 
F G "set_BufferPC" 11 92 "void(int8 data)" `1247 
C L "set_BufferPC" 11 97 1 "FUNCTION"
C L "set_BufferPC" 11 97 1 "FUNCTION"
C L "set_BufferPC" 11 97 1 "FUNCTION"
C L "set_BufferPC" 11 97 1 "FUNCTION"
C L "set_BufferPC" 11 97 1 "FUNCTION"
C L "set_BufferPC" 11 97 1 "FUNCTION"
F N "sendToPC" 11 180 ""
V L "Command" 11 180 "int8" `1250 
V L "length" 11 180 "int8" `1251 
V L "data" 11 180 "*int8" `1260 
F G "sendToPC" 11 181 "void(int8 Command,int8 length,*int8 data)" `1249 
V L "aux" 11 182 "int8[10]" `1257 
V L "auxSize" 11 183 "int8" `1258 
V L "datos" 11 184 "int8[250]" `1259 
V L "index" 11 185 "int8" `1260 
V L "i" 11 190 "int8" `1268 
V L "i" 11 197 "int8" `1276 
V L "i" 11 203 "int8" `1277 
V L "localchkA" 11 209 "int8" `1278 
V L "localchkB" 11 210 "int8" `1279 
V L "i" 11 211 "int8" `1280 
V L "out" 11 213 "int8" `1281 
V L "CheckSum" 11 219 "int16" `1282 
V L "i" 11 221 "int8" `1284 
D G "MimeMsgFromServer" 12 2 "0xA1"
D G "MimeMsgFromPC" 12 3 "0xA2"
D G "MimeSetTimeOutBinary" 12 4 "0xA3"
D G "MimeGetTimeOutBinary" 12 5 "0xA4" "<>"
D G "MimeSetTimeOutACKServer" 12 6 "0xA5"
D G "MimeGetTimeOutACKServer" 12 7 "0xA6" "<>"
D G "MimeSetMaxMimes" 12 8 "0xA7"
D G "MimeGetMaxMimes" 12 9 "0xA8" "<>"
D G "MimeSetEnableOut" 12 10 "0xA9"
D G "MimeGetEnableOut" 12 11 "0xAA" "<>"
D G "MimeSetEnableIn" 12 12 "0xAB"
D G "MimeGetEnableIn" 12 13 "0xAC" "<>"
D G "MimeSetMsgACKFromServer" 12 14 "0xAD"
D G "MimeGetMsgACKFromServer" 12 15 "0xAE" "<>"
D G "MimeSetWaitACKFromServer" 12 16 "0xAF"
D G "MimeGetWaitACKFromServer" 12 17 "0xA0" "<>"
D G "CSSetTimeOut" 12 19 "0xB0"
D G "CSGetTimeOut" 12 20 "0xB1" "<>"
D G "CSSetMaxCustoms" 12 21 "0xB2"
D G "CSGatMaxCustoms" 12 22 "0xB3" "<>"
D G "CSSetAllowedCustoms" 12 23 "0xB4"
D G "CSGetAllowedCustoms" 12 24 "0xB5" "<>"
D G "CSSetAllowedStatusData" 12 25 "0xB6"
D G "CSGetAllowedStatusData" 12 26 "0xB7" "<>"
D G "ActSetMode" 12 28 "0xC0"
D G "ActGetMode" 12 29 "0xC1" "<>"
D G "ActSetConfigTimedOutput" 12 30 "0xC2"
D G "ActGetConfigTimedOutput" 12 31 "0xC3" "<>"
D G "ActSetTimeOutPass" 12 32 "0xC4"
D G "ActGetTimeOutPass" 12 33 "0xC5" "<>"
D G "ActGetActualValue" 12 34 "0xC6" "<>"
D G "ActSetOutput" 12 35 "0xC7"
D G "ActSettimedOutput" 12 36 "0xC8"
D G "ActSetPass" 12 37 "0xC9" "<>"
D G "ActError" 12 38 "0xCA"
D G "ActSetEnableClientRqst" 12 39 "0xCB"
D G "ActGetEnableClientRqst" 12 40 "0xCD" "<>"
D G "DBISetTimeHeartBeat" 12 42 "0xD0"
D G "DBIGetTimeHeartBeat" 12 43 "0xD1" "<>"
D G "DBISetEnableHeartBeat" 12 44 "0xD2"
D G "DBIGetEnableHeartBeat" 12 45 "0xD3" "<>"
D G "DBIGetFwVersion" 12 46 "0xD4" "<>"
D G "DBIGetHwVersion" 12 47 "0xD5" "<>"
D G "DBIResetHardware" 12 48 "0xD6"
D G "DBIForceToSentHearbeat" 12 49 "0xD7"
D G "DBIGetAllInfo" 12 50 "0xD8" "<>"
D G "DBIGetDeviceSerie" 12 51 "0xD9" "<>"
D G "GoInfoSetRequestTime" 12 53 "0xE0"
D G "GoInfoGetRequestTime" 12 54 "0xE1"
D G "GoInfoSetEnableShow" 12 55 "0xE2"
D G "GoInfoGetEnableShow" 12 56 "0xE3"
D G "GoInfoSetEnableRqst" 12 57 "0xE4"
D G "GoInfoGetEnableRqst" 12 58 "0xE5"
D G "InputSetEnableShow" 12 60 "0x80"
D G "InputGetEnableShow" 12 61 "0x81" "<>"
D G "InputSetEnableStatus" 12 62 "0x82"
D G "InputGetEnableStatus" 12 63 "0x83" "<>"
D G "InputSetStatusDataId" 12 64 "0x84"
D G "InputGetStatusDataId" 12 65 "0x85" "<>"
D G "InputSetTimeToSense" 12 66 "0x86"
D G "InputGetTimeToSense" 12 67 "0x87" "<>"
D G "InputSetEnableSaveEeprom" 12 69 "0x90"
D G "InputGetEnableSaveEeprom" 12 70 "0x91" "<>"
D G "InputSetValueToSave" 12 71 "0x92"
D G "InputGetValueToSave" 12 72 "0x93" "<>"
D G "EepromSaveAll" 12 73 "0x94"
D G "EepromAllSaved" 12 74 "0x95"
D G "EepromBlockError" 12 75 "0x96"
D G "ack" 12 77 "0xFB"
F N "isFormatedMessage" 12 79 ""
V L "Dato" 12 79 "*int8" `1286 
f G "isFormatedMessage" 12 79 "int8(*int8 Dato)" `1285 
F N "isFormatedMessage" 12 81 ""
V L "Dato" 12 81 "*int8" `1288 
F G "isFormatedMessage" 12 82 "int8(*int8 Dato)" `1285 
V L "result" 12 83 "int1" `1287 
V L "ca" 12 84 "int8" `1288 
V L "cb" 12 85 "int8" `1289 
V L "ccA" 12 86 "int8" `1290 
V L "ccB" 12 87 "int8" `1291 
V L "comando" 12 88 "int8" `1292 
V L "lengh" 12 89 "int8" `1293 
V L "dt" 12 98 "int8" `1294 
V L "i" 12 99 "int8" `1295 
C L "isFormatedMessage" 12 104 1 "FUNCTION"
C L "isFormatedMessage" 12 104 1 "FUNCTION"
C L "isFormatedMessage" 12 104 1 "FUNCTION"
F N "EepromInit" 13 2 ""
F G "EepromInit" 13 3 "int8()" `1044 
V L "BlockResult" 13 41 "int1" `1296 
C L "EepromInit" 13 48 1 "FUNCTION"
C L "EepromInit" 13 48 1 "FUNCTION"
V L "i" 13 59 "int8" `1297 
C L "EepromInit" 13 48 1 "FUNCTION"
F N "EepromSave" 13 77 ""
V L "Structura" 13 77 "Variables" `1299 
F G "EepromSave" 13 78 "void(Variables Structura)" `1045 
V L "i" 13 83 "int8" `1298 
C L "EepromSave" 13 48 1 "FUNCTION"
F N "CompareStructs" 13 97 ""
V L "StructA" 13 97 "Variables" `1048 
V L "StructB" 13 97 "Variables" `1301 
F G "CompareStructs" 13 98 "int8(Variables StructA,Variables StructB)" `1047 
V L "result" 13 99 "int1" `1299 
V L "punteroA" 13 100 "*int8" `1300 
V L "punteroB" 13 101 "*int8" `1301 
C L "CompareStructs" 13 48 2 "FUNCTION"
V L "i" 13 104 "int8" `1302 
V L "nByteA" 13 106 "int8" `1303 
V L "nByteB" 13 107 "int8" `1304 
C L "CompareStructs" 13 48 1 "FUNCTION"
C L "CompareStructs" 13 48 1 "FUNCTION"
F N "EeepromleerBloque" 13 119 ""
V L "bloque" 13 119 "int8" `1051 
V L "Structura" 13 119 " *" `1307 
F G "EeepromleerBloque" 13 120 "int8(int8 bloque, * Structura)" `1050 
V L "ValuesSaved" 13 121 "Variables" `1305 
V L "BlockSize" 13 122 "int16" `1306 
V L "Puntero" 13 123 "*int8" `1307 
V L "result" 13 124 "int1" `1308 
V L "ca" 13 125 "int8" `1309 
V L "cb" 13 125 "int8" `1310 
V L "startAddress" 13 126 "int16" `1311 
C L "EeepromleerBloque" 13 48 1 "FUNCTION"
V L "i" 13 133 "int8" `1312 
V L "nByte" 13 135 "int8" `1313 
C L "EeepromleerBloque" 13 48 1 "FUNCTION"
V L "cAreal" 13 143 "int8" `1314 
V L "cBreal" 13 144 "int8" `1315 
C L "EeepromleerBloque" 13 48 1 "FUNCTION"
C L "EeepromleerBloque" 13 48 1 "FUNCTION"
F N "EepromEscribirBloque" 13 155 ""
V L "bloque" 13 155 "int8" `1054 
V L "Structura" 13 155 "Variables" `1318 
F G "EepromEscribirBloque" 13 156 "void(int8 bloque,Variables Structura)" `1053 
V L "BlockSize" 13 157 "int16" `1316 
V L "ca" 13 158 "int8" `1317 
V L "cb" 13 158 "int8" `1318 
V L "startAddress" 13 159 "int16" `1319 
C L "EepromEscribirBloque" 13 48 1 "FUNCTION"
V L "Puntero" 13 166 "*int8" `1320 
V L "i" 13 167 "int8" `1321 
V L "nByte" 13 169 "int8" `1322 
V L "addChk" 13 175 "int16" `1323 
C L "EepromEscribirBloque" 13 48 1 "FUNCTION"
F N "EcribirEeprom" 13 183 ""
V L "add" 13 183 "int16" `1057 
V L "value" 13 183 "int8" `1326 
F G "EcribirEeprom" 13 184 "void(int16 add,int8 value)" `1056  "write_eeprom (add, value);"
V L "aH" 13 187 "int8" `1324 
V L "aL" 13 188 "int8" `1325 
F N "LeerEeprom" 13 216 ""
V L "add" 13 216 "int16" `1328 
F G "LeerEeprom" 13 217 "int8(int16 add)" `1059 
V L "result" 13 218 "int8" `1327  "= read_EEPROM(add);"
V L "aH" 13 220 "int8" `1328 
V L "aL" 13 221 "int8" `1329 
V G "InputEventDetected" 14 1 "int1" `1330 
V G "InputStatus" 14 2 "int1" `1331 
V G "EntradaDigital" 14 11 "{int1 ActualSatus,int1 LastStatus,int16 TimeToSense,int16 TimeNow,int16 StatusDataID}" `1338 
F N "InputInit" 14 13 ""
f G "InputInit" 14 13 "void()" `1339 
F N "InputSetTime" 14 14 ""
f G "InputSetTime" 14 14 "void()" `1340 
F N "InputInit" 14 16 ""
F G "InputInit" 14 17 "void()" `1339 
F N "InputSetTime" 14 28 ""
F G "InputSetTime" 14 29 "void()" `1340 
V G "deviceType" 0 10 "int16" `1341 
V G "cdmMessage" 0 13 "int8[70]" `1342 
V G "cmdSize" 0 14 "int8" `1343 
V G "GoInfo" 0 16 "int8[255]" `1344 
V G "GoInfoSize" 0 17 "int8" `1345 
V G "timeToShow" 0 19 "int16" `1346 
V G "showDevice" 0 20 "int1" `1347 
V G "GoDeviceInfo" 0 22 "HOS_DeviceData" `1348 
F N "TIMER2_isr" 0 25 ""
F G "TIMER2_isr" 0 26 "void()" `1349  "interrupcion cada 5 ms"
F N "RDA_isr" 0 39 ""
F G "RDA_isr" 0 40 "void()" `1350 
V L "Dato" 0 43 "int8" `1351 
F N "RDA2_isr" 0 50 ""
F G "RDA2_isr" 0 51 "void()" `1352 
V L "Dato" 0 54 "int8" `1353 
F N "upDateVariables" 0 59 ""
f G "upDateVariables" 0 59 "Variables()" `1354 
F N "setup" 0 61 ""
F G "setup" 0 62 "void()" `1355 
C L "setup" 0 12 1 "FUNCTION"
C L "setup" 0 12 1 "FUNCTION"
V L "i" 0 75 "int16" `1356 
C L "setup" 0 12 1 "FUNCTION"
C L "setup" 0 12 1 "FUNCTION"
F N "MAIN" 0 108 ""
F G "MAIN" 0 109 "void()" `1357 
C L "MAIN" 0 12 1 "FUNCTION"
V L "idStatus" 0 239 "int16" `1384 
V L "dataStatus" 0 240 "int32" `1385 
V L "i" 0 291 "int8" `1392 
V L "cdmMessage" 0 293 "int8[2]" `1393 
V L "toReset" 0 358 "int32" `1402 
V L "inReset" 0 359 "int32" `1403 
C L "MAIN" 0 12 1 "FUNCTION"
V L "i" 0 463 "int16" `1419 
C L "MAIN" 0 12 1 "FUNCTION"
V L "serie" 0 527 "int8[8]" `1428 
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 2 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
V L "i" 0 632 "int8" `1437 
C L "MAIN" 0 12 1 "FUNCTION"
V L "i" 0 641 "int8" `1438 
V L "cdmMessage" 0 643 "int8[2]" `1439 
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 695 "int8[1]" `1444 
V L "valor" 0 711 "int16" `1446 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 714 "int8[2]" `1447 
V L "buf" 0 723 "int8[2]" `1448 
V L "valor" 0 733 "int32" `1449 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 736 "int8[4]" `1450 
V L "buf" 0 747 "int8[4]" `1451 
V L "valor" 0 759 "int16" `1452 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 762 "int8[2]" `1453 
V L "buf" 0 771 "int8[2]" `1454 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 783 "int8[1]" `1455 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 791 "int8[1]" `1456 
V L "buf" 0 799 "int8[1]" `1457 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 810 "int8[1]" `1458 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 818 "int8[1]" `1459 
V L "buf" 0 826 "int8[1]" `1460 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 837 "int8[1]" `1461 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 845 "int8[1]" `1462 
V L "buf" 0 853 "int8[1]" `1463 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 864 "int8[1]" `1464 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 872 "int8[1]" `1465 
V L "buf" 0 880 "int8[1]" `1466 
V L "valor" 0 889 "int16" `1467 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 892 "int8[2]" `1468 
V L "buf" 0 901 "int8[4]" `1469 
V L "valor" 0 911 "int16" `1470 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 914 "int8[2]" `1471 
V L "buf" 0 923 "int8[2]" `1472 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 935 "int8[1]" `1473 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 943 "int8[1]" `1474 
V L "buf" 0 951 "int8[1]" `1475 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 962 "int8[1]" `1476 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 970 "int8[1]" `1477 
V L "buf" 0 978 "int8[1]" `1478 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 989 "int8[1]" `1479 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 997 "int8[1]" `1480 
V L "buf" 0 1005 "int8[1]" `1481 
V L "toReset" 0 1014 "int32" `1482 
V L "inReset" 0 1015 "int32" `1483 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1019 "int8[8]" `1484 
V L "buf" 0 1034 "int8[8]" `1485 
V L "valor" 0 1050 "int32" `1486 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1053 "int8[4]" `1487 
V L "buf" 0 1064 "int8[4]" `1488 
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
V L "Pass" 0 1087 "int16" `1489 
V L "buf" 0 1094 "int8[2]" `1490 
C L "MAIN" 0 12 2 "FUNCTION"
V L "buf" 0 1103 "int8[1]" `1491 
V L "buf" 0 1111 "int8[1]" `1492 
V L "pin" 0 1122 "int16" `1493 
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
V L "Pass" 0 1228 "int16" `1509 
V L "buf" 0 1235 "int8[2]" `1510 
C L "MAIN" 0 12 2 "FUNCTION"
V L "buf" 0 1244 "int8[1]" `1511 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1256 "int8[1]" `1512 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1264 "int8[1]" `1513 
V L "buf" 0 1272 "int8[1]" `1514 
V L "valor" 0 1281 "int32" `1515 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1284 "int8[4]" `1516 
V L "buf" 0 1295 "int8[4]" `1517 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1309 "int8[1]" `1518 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1317 "int8[1]" `1519 
V L "buf" 0 1325 "int8[1]" `1520 
V L "buf" 0 1341 "int8[2]" `1522 
V L "buf" 0 1349 "int8[2]" `1523 
V L "i" 0 1359 "int16" `1525 
C L "MAIN" 0 12 1 "FUNCTION"
V L "serie" 0 1370 "int8[8]" `1526 
V L "buf" 0 1372 "int8[10]" `1527 
V L "valor" 0 1390 "int32" `1528 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1393 "int8[4]" `1529 
V L "buf" 0 1404 "int8[4]" `1530 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1418 "int8[1]" `1531 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1426 "int8[1]" `1532 
V L "buf" 0 1434 "int8[1]" `1533 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1445 "int8[1]" `1534 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1453 "int8[1]" `1535 
V L "buf" 0 1461 "int8[1]" `1536 
V L "index" 0 1468 "int8" `1537 
V L "buf" 0 1469 "int8[60]" `1538 
V L "result" 0 1470 "Variables" `1539 
V L "structNow" 0 1552 "Variables" `1540 
V L "buf" 0 1557 "int8[1]" `1541 
V L "buf" 0 1568 "int8[1]" `1542 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1576 "int8[1]" `1543 
V L "buf" 0 1584 "int8[1]" `1544 
V L "buf" 0 1594 "int8[1]" `1545 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1602 "int8[1]" `1546 
V L "buf" 0 1610 "int8[1]" `1547 
V L "valor" 0 1619 "int16" `1548 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1622 "int8[2]" `1549 
V L "buf" 0 1631 "int8[2]" `1550 
V L "valor" 0 1641 "int16" `1551 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1644 "int8[2]" `1552 
V L "buf" 0 1653 "int8[2]" `1553 
V L "buf" 0 1664 "int8[1]" `1554 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1672 "int8[1]" `1555 
V L "buf" 0 1680 "int8[1]" `1556 
V L "buf" 0 1690 "int8[1]" `1557 
C L "MAIN" 0 12 1 "FUNCTION"
V L "buf" 0 1698 "int8[1]" `1558 
V L "buf" 0 1706 "int8[1]" `1559 
C L "MAIN" 0 12 1 "FUNCTION"
V L "i" 0 1714 "int8" `1560 
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 5 "FUNCTION"
C L "MAIN" 0 12 4 "FUNCTION"
V L "structNow" 0 1769 "Variables" `1563 
V L "buf" 0 1774 "int8[1]" `1564 
V L "idStatus" 0 1818 "int16" `1569 
V L "dataStatus" 0 1819 "int32" `1570 
V L "status" 0 1825 "int1" `1571 
V L "structNow" 0 1828 "Variables" `1572 
V L "buf" 0 1833 "int8[1]" `1573 
F N "upDateVariables" 0 1847 ""
F G "upDateVariables" 0 1848 "Variables()" `1354 
V L "ValorActual" 0 1849 "Variables" `1574 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_e" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "port_f_pullups" 1 0
F B "port_g_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
